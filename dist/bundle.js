!function(t){var e={};function n(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(i,a,function(e){return t[e]}.bind(null,a));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);n(1),n(2),n(3),n(4),n(5),n(6),n(7),n(10),n(15),n(17),n(19),n(21),n(8)},function(t,e){!function(){"use strict";let t=0;function e(e){t=e;let n=document.getElementsByClassName("slideCollection"),i=document.getElementsByClassName("dot");e>=n.length&&(t=0),e<0&&(t=n.length-1);for(let t=0;t<n.length;t++)n[t].style.display="none";for(let t=0;t<i.length;t++)i[t].classList.remove("active");n[t].style.display="block",i[t].classList.add("active")}e(t),document.getElementById("dot-container").addEventListener("click",function(t){t.preventDefault(),t.target.dataset.key&&e(t.target.dataset.key-1)}),document.getElementById("next-button").addEventListener("click",function(n){n.preventDefault(),e(t+1)}),document.getElementById("previous-button").addEventListener("click",function(n){n.preventDefault(),e(t-1)})}()},function(t,e){var n;n=document.getElementById("js-menu"),document.getElementById("js-navbar-toggle").addEventListener("click",function(){n.classList.toggle("active_menu")})},function(t,e){!function(){new function(t){var e;this.handlerControllerOpen=function(n){var i=(n=event.target).getAttribute("data-id");e=document.getElementById(i);var a=n.getAttribute("data-img");t.openModal(e,a)},this.handlerControllerClose=function(){t.closeModal(e)};var n=document.querySelectorAll(" .close_btn-modal");Array.from(n).forEach(t=>t.addEventListener("click",this.handlerControllerClose));var i=document.querySelectorAll(" #closeModal");Array.from(i).forEach(t=>t.addEventListener("click",this.handlerControllerClose));var a=document.querySelector(".service").getElementsByTagName("a");Array.from(a).forEach(t=>t.addEventListener("click",this.handlerControllerOpen));var o=document.querySelector(".ourworks-container").getElementsByTagName("a");Array.from(o).forEach(t=>t.addEventListener("click",this.handlerControllerOpen));var r=document.querySelector(".instagram-container").getElementsByTagName("a");Array.from(r).forEach(t=>t.addEventListener("click",this.handlerControllerOpen))}(new function(t){this.openModal=function(e,n){t.showModal(e,n)},this.closeModal=function(e){t.hideModal(e)}}(new function(){this.showModal=function(t,e){(t=t).classList.remove("closed"),document.querySelector(".modal_img_container").setAttribute("style","background-image: url("+e+");background-repeat: no-repeat; background-size: cover;")},this.hideModal=function(t){(t=t).classList.add("closed")}}))}()},function(t,e){firebase.initializeApp({apiKey:"AIzaSyC7vCtT71b-6JuhsQu1gnZfV5NWbskYgsE",authDomain:"fir-kulsha.firebaseapp.com",databaseURL:"https://fir-kulsha.firebaseio.com",projectId:"fir-kulsha",storageBucket:"",messagingSenderId:"684911530484",appId:"1:684911530484:web:af07eb6870950bdf"})},function(t,e){var n=document.getElementById("watchMore"),i=document.querySelector(".additionalSection"),a=document.querySelector(".arrow-down"),o=document.getElementById("watchLess"),r=document.querySelector(".arrow-up");n.addEventListener("click",function(){i.classList.add("show_section")}),a.addEventListener("click",function(){i.classList.add("show_section")}),o.addEventListener("click",function(){i.classList.remove("show_section")}),r.addEventListener("click",function(){i.classList.remove("show_section")})},function(t,e){var n=firebase.database(),i=document.querySelector("#cloud"),a=document.querySelector(".car_wraper"),o=document.querySelector(".car-button");n.ref("Progress/").on("value",function(t){var e=[],n=t.val();for(var r in n)e.push(n[r]);o.addEventListener("click",function(){a.classList.contains("animation")?a.classList.remove("animation"):(!function t([e,...n]){e&&(i.innerHTML=`<span class="textCloud">${e}</span>`,setTimeout(function(){t(n)},3e3))}(e),a.classList.add("animation"))})})},function(t,e){var n,i=firebase.database();i.ref("cars/").on("value",function(t){n=[];var e=t.val();for(var i in e)n.push(e[i]);console.log(n),function(t){var e=document.getElementById("brandsChart").getContext("2d");new Chart(e,{type:"bar",data:{labels:[`${t[0].brandname}`,`${t[1].brandname}`,`${t[2].brandname}`,`${t[3].brandname}`,`${t[4].brandname}`,`${t[5].brandname}`,`${t[6].brandname}`],datasets:[{label:"Количество авто",data:[`${t[0].quantity}`,`${t[1].quantity}`,`${t[2].quantity}`,`${t[3].quantity}`,`${t[4].quantity}`,`${t[5].quantity}`,`${t[6].quantity}`],backgroundColor:["rgb(255, 99, 132)","rgb(54, 162, 235)","rgb(255, 206, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(255, 159, 64)","rgb(70, 173, 29)","rgb(231, 35, 166)"],borderColor:["rgb(255, 99, 132)","rgb(54, 162, 235)","rgb(255, 206, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(255, 159, 64)","rgb(70, 173, 29)","rgb(231, 35, 166)"],borderWidth:1}]},options:{responsive:!0,scales:{yAxes:[{stacked:!0,ticks:{beginAtZero:!0,fontFamily:"'Open Sans', sans-serif",fontSize:14,fontStyle:"bold",fontColor:"#000"}}],xAxes:[{stacked:!0,ticks:{fontFamily:"'Open Sans', sans-serif",fontSize:12,fontStyle:"bold",fontColor:"#000"}}]},legend:{display:!1},title:{display:!0,position:"top",text:"Количество затонированных машин (по маркам):",fontSize:18,fontColor:"#000",padding:20},tooltips:{mode:"index",axis:"y"},animations:{animateRotate:!0,animateScale:!0}}})}(n)}),i.ref("service/").on("value",function(t){var e=[],n=t.val();for(var i in n)e.push(n[i]);console.log(e),function(t){var e=document.getElementById("serviceChart").getContext("2d");new Chart(e,{type:"doughnut",data:{labels:[`${t[0].servicename}`,`${t[1].servicename}`,`${t[2].servicename}`,`${t[3].servicename}`,`${t[4].servicename}`],datasets:[{label:"Объем услуг в (%)",data:[`${t[0].popularity}`,`${t[1].popularity}`,`${t[2].popularity}`,`${t[3].popularity}`,`${t[4].popularity}`],backgroundColor:["#d19241","#60bb7b","#DC143C","#F4A460","#e0de37f5"],borderColor:["#d19241","#60bb7b","#CB252B","#E39371","#e0de37f5"],borderWidth:1}]},options:{responsive:!0,title:{display:!0,position:"top",text:"Популярность оказываемых услуг (%):",fontSize:18,fontColor:"#111",padding:20},legend:{display:!0,position:"bottom",labels:{fontColor:"#000",fontSize:12,padding:25,fontStyle:"bold"}},animations:{animateRotate:!0,animateScale:!0}}})}(e)})},function(t,e,n){
/*!
 * Chart.js v2.8.0
 * https://www.chartjs.org
 * (c) 2019 Chart.js Contributors
 * Released under the MIT License
 */
t.exports=function(t){"use strict";t=t&&t.hasOwnProperty("default")?t.default:t;var e={rgb2hsl:n,rgb2hsv:i,rgb2hwb:a,rgb2cmyk:o,rgb2keyword:s,rgb2xyz:l,rgb2lab:d,rgb2lch:function(t){return y(d(t))},hsl2rgb:u,hsl2hsv:function(t){var e=t[0],n=t[1]/100,i=t[2]/100;return 0===i?[0,0,0]:[e,2*(n*=(i*=2)<=1?i:2-i)/(i+n)*100,(i+n)/2*100]},hsl2hwb:function(t){return a(u(t))},hsl2cmyk:function(t){return o(u(t))},hsl2keyword:function(t){return s(u(t))},hsv2rgb:c,hsv2hsl:function(t){var e,n,i=t[0],a=t[1]/100,o=t[2]/100;return e=a*o,[i,100*(e=(e/=(n=(2-a)*o)<=1?n:2-n)||0),100*(n/=2)]},hsv2hwb:function(t){return a(c(t))},hsv2cmyk:function(t){return o(c(t))},hsv2keyword:function(t){return s(c(t))},hwb2rgb:h,hwb2hsl:function(t){return n(h(t))},hwb2hsv:function(t){return i(h(t))},hwb2cmyk:function(t){return o(h(t))},hwb2keyword:function(t){return s(h(t))},cmyk2rgb:f,cmyk2hsl:function(t){return n(f(t))},cmyk2hsv:function(t){return i(f(t))},cmyk2hwb:function(t){return a(f(t))},cmyk2keyword:function(t){return s(f(t))},keyword2rgb:w,keyword2hsl:function(t){return n(w(t))},keyword2hsv:function(t){return i(w(t))},keyword2hwb:function(t){return a(w(t))},keyword2cmyk:function(t){return o(w(t))},keyword2lab:function(t){return d(w(t))},keyword2xyz:function(t){return l(w(t))},xyz2rgb:p,xyz2lab:m,xyz2lch:function(t){return y(m(t))},lab2xyz:v,lab2rgb:x,lab2lch:y,lch2lab:k,lch2xyz:function(t){return v(k(t))},lch2rgb:function(t){return x(k(t))}};function n(t){var e,n,i=t[0]/255,a=t[1]/255,o=t[2]/255,r=Math.min(i,a,o),s=Math.max(i,a,o),l=s-r;return s==r?e=0:i==s?e=(a-o)/l:a==s?e=2+(o-i)/l:o==s&&(e=4+(i-a)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(r+s)/2,[e,100*(s==r?0:n<=.5?l/(s+r):l/(2-s-r)),100*n]}function i(t){var e,n,i=t[0],a=t[1],o=t[2],r=Math.min(i,a,o),s=Math.max(i,a,o),l=s-r;return n=0==s?0:l/s*1e3/10,s==r?e=0:i==s?e=(a-o)/l:a==s?e=2+(o-i)/l:o==s&&(e=4+(i-a)/l),(e=Math.min(60*e,360))<0&&(e+=360),[e,n,s/255*1e3/10]}function a(t){var e=t[0],i=t[1],a=t[2],o=n(t)[0],r=1/255*Math.min(e,Math.min(i,a)),a=1-1/255*Math.max(e,Math.max(i,a));return[o,100*r,100*a]}function o(t){var e,n=t[0]/255,i=t[1]/255,a=t[2]/255;return e=Math.min(1-n,1-i,1-a),[100*((1-n-e)/(1-e)||0),100*((1-i-e)/(1-e)||0),100*((1-a-e)/(1-e)||0),100*e]}function s(t){return _[JSON.stringify(t)]}function l(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92,n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92,i=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92;var a=.4124*e+.3576*n+.1805*i,o=.2126*e+.7152*n+.0722*i,r=.0193*e+.1192*n+.9505*i;return[100*a,100*o,100*r]}function d(t){var e=l(t),n=e[0],i=e[1],a=e[2];return i/=100,a/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,i=i>.008856?Math.pow(i,1/3):7.787*i+16/116,a=a>.008856?Math.pow(a,1/3):7.787*a+16/116,[116*i-16,500*(n-i),200*(i-a)]}function u(t){var e,n,i,a,o,r=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return[o=255*l,o,o];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),a=[0,0,0];for(var d=0;d<3;d++)(i=r+1/3*-(d-1))<0&&i++,i>1&&i--,o=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,a[d]=255*o;return a}function c(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,a=Math.floor(e)%6,o=e-Math.floor(e),r=255*i*(1-n),s=255*i*(1-n*o),l=255*i*(1-n*(1-o)),i=255*i;switch(a){case 0:return[i,l,r];case 1:return[s,i,r];case 2:return[r,i,l];case 3:return[r,s,i];case 4:return[l,r,i];case 5:return[i,r,s]}}function h(t){var e,n,i,a,o=t[0]/360,s=t[1]/100,l=t[2]/100,d=s+l;switch(d>1&&(s/=d,l/=d),e=Math.floor(6*o),i=6*o-e,0!=(1&e)&&(i=1-i),a=s+i*((n=1-l)-s),e){default:case 6:case 0:r=n,g=a,b=s;break;case 1:r=a,g=n,b=s;break;case 2:r=s,g=n,b=a;break;case 3:r=s,g=a,b=n;break;case 4:r=a,g=s,b=n;break;case 5:r=n,g=s,b=a}return[255*r,255*g,255*b]}function f(t){var e,n,i,a=t[0]/100,o=t[1]/100,r=t[2]/100,s=t[3]/100;return e=1-Math.min(1,a*(1-s)+s),n=1-Math.min(1,o*(1-s)+s),i=1-Math.min(1,r*(1-s)+s),[255*e,255*n,255*i]}function p(t){var e,n,i,a=t[0]/100,o=t[1]/100,r=t[2]/100;return n=-.9689*a+1.8758*o+.0415*r,i=.0557*a+-.204*o+1.057*r,e=(e=3.2406*a+-1.5372*o+-.4986*r)>.0031308?1.055*Math.pow(e,1/2.4)-.055:e*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,i=i>.0031308?1.055*Math.pow(i,1/2.4)-.055:i*=12.92,e=Math.min(Math.max(0,e),1),n=Math.min(Math.max(0,n),1),i=Math.min(Math.max(0,i),1),[255*e,255*n,255*i]}function m(t){var e=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,n=n>.008856?Math.pow(n,1/3):7.787*n+16/116,i=i>.008856?Math.pow(i,1/3):7.787*i+16/116,[116*n-16,500*(e-n),200*(n-i)]}function v(t){var e,n,i,a,o=t[0],r=t[1],s=t[2];return o<=8?a=(n=100*o/903.3)/100*7.787+16/116:(n=100*Math.pow((o+16)/116,3),a=Math.pow(n/100,1/3)),e=e/95.047<=.008856?e=95.047*(r/500+a-16/116)/7.787:95.047*Math.pow(r/500+a,3),i=i/108.883<=.008859?i=108.883*(a-s/200-16/116)/7.787:108.883*Math.pow(a-s/200,3),[e,n,i]}function y(t){var e,n,i,a=t[0],o=t[1],r=t[2];return e=Math.atan2(r,o),(n=360*e/2/Math.PI)<0&&(n+=360),i=Math.sqrt(o*o+r*r),[a,i,n]}function x(t){return p(v(t))}function k(t){var e,n,i,a=t[0],o=t[1],r=t[2];return i=r/360*2*Math.PI,e=o*Math.cos(i),n=o*Math.sin(i),[a,e,n]}function w(t){return M[t]}var M={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},_={};for(var C in M)_[JSON.stringify(M[C])]=C;var S=function(){return new T};for(var P in e){S[P+"Raw"]=function(t){return function(n){return"number"==typeof n&&(n=Array.prototype.slice.call(arguments)),e[t](n)}}(P);var I=/(\w+)2(\w+)/.exec(P),A=I[1],D=I[2];(S[A]=S[A]||{})[D]=S[P]=function(t){return function(n){"number"==typeof n&&(n=Array.prototype.slice.call(arguments));var i=e[t](n);if("string"==typeof i||void 0===i)return i;for(var a=0;a<i.length;a++)i[a]=Math.round(i[a]);return i}}(P)}var T=function(){this.convs={}};T.prototype.routeSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n))},T.prototype.setValues=function(t,e){return this.space=t,this.convs={},this.convs[t]=e,this},T.prototype.getValues=function(t){var e=this.convs[t];if(!e){var n=this.space,i=this.convs[n];e=S[n][t](i),this.convs[t]=e}return e},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(t){T.prototype[t]=function(e){return this.routeSpace(t,arguments)}});var F=S,L={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},O={getRgba:R,getHsla:z,getRgb:function(t){var e=R(t);return e&&e.slice(0,3)},getHsl:function(t){var e=z(t);return e&&e.slice(0,3)},getHwb:B,getAlpha:function(t){var e=R(t);return e?e[3]:(e=z(t))?e[3]:(e=B(t))?e[3]:void 0},hexString:function(t,e){var e=void 0!==e&&3===t.length?e:t[3];return"#"+H(t[0])+H(t[1])+H(t[2])+(e>=0&&e<1?H(Math.round(255*e)):"")},rgbString:function(t,e){return e<1||t[3]&&t[3]<1?N(t,e):"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:N,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return W(t,e);var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),a=Math.round(t[2]/255*100);return"rgb("+n+"%, "+i+"%, "+a+"%)"},percentaString:W,hslString:function(t,e){return e<1||t[3]&&t[3]<1?E(t,e):"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:E,hwbString:function(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return j[t.slice(0,3)]}};function R(t){if(t){var e=[0,0,0],n=1,i=t.match(/^#([a-fA-F0-9]{3,4})$/i),a="";if(i){i=i[1],a=i[3];for(var o=0;o<e.length;o++)e[o]=parseInt(i[o]+i[o],16);a&&(n=Math.round(parseInt(a+a,16)/255*100)/100)}else if(i=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){a=i[2],i=i[1];for(var o=0;o<e.length;o++)e[o]=parseInt(i.slice(2*o,2*o+2),16);a&&(n=Math.round(parseInt(a,16)/255*100)/100)}else if(i=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(var o=0;o<e.length;o++)e[o]=parseInt(i[o+1]);n=parseFloat(i[4])}else if(i=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(var o=0;o<e.length;o++)e[o]=Math.round(2.55*parseFloat(i[o+1]));n=parseFloat(i[4])}else if(i=t.match(/(\w+)/)){if("transparent"==i[1])return[0,0,0,0];if(!(e=L[i[1]]))return}for(var o=0;o<e.length;o++)e[o]=V(e[o],0,255);return n=n||0==n?V(n,0,1):1,e[3]=n,e}}function z(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]),i=V(parseInt(e[1]),0,360),a=V(parseFloat(e[2]),0,100),o=V(parseFloat(e[3]),0,100),r=V(isNaN(n)?1:n,0,1);return[i,a,o,r]}}}function B(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]),i=V(parseInt(e[1]),0,360),a=V(parseFloat(e[2]),0,100),o=V(parseFloat(e[3]),0,100),r=V(isNaN(n)?1:n,0,1);return[i,a,o,r]}}}function N(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function W(t,e){var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),a=Math.round(t[2]/255*100);return"rgba("+n+"%, "+i+"%, "+a+"%, "+(e||t[3]||1)+")"}function E(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function V(t,e,n){return Math.min(Math.max(e,t),n)}function H(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var j={};for(var q in L)j[L[q]]=q;var U=function(t){return t instanceof U?t:this instanceof U?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(e=O.getRgba(t))?this.setValues("rgb",e):(e=O.getHsla(t))?this.setValues("hsl",e):(e=O.getHwb(t))&&this.setValues("hwb",e):"object"==typeof t&&(void 0!==(e=t).r||void 0!==e.red?this.setValues("rgb",e):void 0!==e.l||void 0!==e.lightness?this.setValues("hsl",e):void 0!==e.v||void 0!==e.value?this.setValues("hsv",e):void 0!==e.w||void 0!==e.whiteness?this.setValues("hwb",e):void 0===e.c&&void 0===e.cyan||this.setValues("cmyk",e)))):new U(t);var e};U.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t&&(t=(t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return O.hexString(this.values.rgb)},rgbString:function(){return O.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return O.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return O.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return O.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return O.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return O.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return O.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=t,i=void 0===e?.5:e,a=2*i-1,o=this.alpha()-n.alpha(),r=((a*o==-1?a:(a+o)/(1+a*o))+1)/2,s=1-r;return this.rgb(r*this.red()+s*n.red(),r*this.green()+s*n.green(),r*this.blue()+s*n.blue()).alpha(this.alpha()*i+n.alpha()*(1-i))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new U,i=this.values,a=n.values;for(var o in i)i.hasOwnProperty(o)&&(t=i[o],"[object Array]"===(e={}.toString.call(t))?a[o]=t.slice(0):"[object Number]"===e?a[o]=t:console.error("unexpected color value:",t));return n}},U.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},U.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},U.prototype.getValues=function(t){for(var e=this.values,n={},i=0;i<t.length;i++)n[t.charAt(i)]=e[t][i];return 1!==e.alpha&&(n.a=e.alpha),n},U.prototype.setValues=function(t,e){var n,i,a=this.values,o=this.spaces,r=this.maxes,s=1;if(this.valid=!0,"alpha"===t)s=e;else if(e.length)a[t]=e.slice(0,t.length),s=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)a[t][n]=e[t.charAt(n)];s=e.a}else if(void 0!==e[o[t][0]]){var l=o[t];for(n=0;n<t.length;n++)a[t][n]=e[l[n]];s=e.alpha}if(a.alpha=Math.max(0,Math.min(1,void 0===s?a.alpha:s)),"alpha"===t)return!1;for(n=0;n<t.length;n++)i=Math.max(0,Math.min(r[t][n],a[t][n])),a[t][n]=Math.round(i);for(var d in o)d!==t&&(a[d]=F[t][d](a[t]));return!0},U.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},U.prototype.setChannel=function(t,e,n){var i=this.values[t];return void 0===n?i[e]:n===i[e]?this:(i[e]=n,this.setValues(t,i),this)},"undefined"!=typeof window&&(window.Color=U);var Y,$=U,X={noop:function(){},uid:(Y=0,function(){return Y++}),isNullOrUndef:function(t){return null==t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},isFinite:function(t){return("number"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return X.valueOrDefault(X.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,i){var a,o,r;if(X.isArray(t))if(o=t.length,i)for(a=o-1;a>=0;a--)e.call(n,t[a],a);else for(a=0;a<o;a++)e.call(n,t[a],a);else if(X.isObject(t))for(r=Object.keys(t),o=r.length,a=0;a<o;a++)e.call(n,t[r[a]],r[a])},arrayEquals:function(t,e){var n,i,a,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(a=t[n],o=e[n],a instanceof Array&&o instanceof Array){if(!X.arrayEquals(a,o))return!1}else if(a!==o)return!1;return!0},clone:function(t){if(X.isArray(t))return t.map(X.clone);if(X.isObject(t)){for(var e={},n=Object.keys(t),i=n.length,a=0;a<i;++a)e[n[a]]=X.clone(t[n[a]]);return e}return t},_merger:function(t,e,n,i){var a=e[t],o=n[t];X.isObject(a)&&X.isObject(o)?X.merge(a,o,i):e[t]=X.clone(o)},_mergerIf:function(t,e,n){var i=e[t],a=n[t];X.isObject(i)&&X.isObject(a)?X.mergeIf(i,a):e.hasOwnProperty(t)||(e[t]=X.clone(a))},merge:function(t,e,n){var i,a,o,r,s,l=X.isArray(e)?e:[e],d=l.length;if(!X.isObject(t))return t;for(i=(n=n||{}).merger||X._merger,a=0;a<d;++a)if(e=l[a],X.isObject(e))for(o=Object.keys(e),s=0,r=o.length;s<r;++s)i(o[s],t,e,n);return t},mergeIf:function(t,e){return X.merge(t,e,{merger:X._mergerIf})},extend:function(t){for(var e=function(e,n){t[n]=e},n=1,i=arguments.length;n<i;++n)X.each(arguments[n],e);return t},inherits:function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},i=function(){this.constructor=n};return i.prototype=e.prototype,n.prototype=new i,n.extend=X.inherits,t&&X.extend(n.prototype,t),n.__super__=e.prototype,n}},K=X;X.callCallback=X.callback,X.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},X.getValueOrDefault=X.valueOrDefault,X.getValueAtIndexOrDefault=X.valueAtIndexOrDefault;var G={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-((t-=1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return(t-=1)*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return t>=1?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-(t-=1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n||(n=.3),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),-i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n||(n=.3),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2==(t/=.5)?1:(n||(n=.45),i<1?(i=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/i),t<1?i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*-.5:i*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-G.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*G.easeInBounce(2*t):.5*G.easeOutBounce(2*t-1)+.5}},Z={effects:G};K.easingEffects=G;var J=Math.PI,Q=J/180,tt=2*J,et=J/2,nt=J/4,it=2*J/3,at={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,i,a,o){if(o){var r=Math.min(o,a/2,i/2),s=e+r,l=n+r,d=e+i-r,u=n+a-r;t.moveTo(e,l),s<d&&l<u?(t.arc(s,l,r,-J,-et),t.arc(d,l,r,-et,0),t.arc(d,u,r,0,et),t.arc(s,u,r,et,J)):s<d?(t.moveTo(s,n),t.arc(d,l,r,-et,et),t.arc(s,l,r,et,J+et)):l<u?(t.arc(s,l,r,-J,0),t.arc(s,u,r,0,J)):t.arc(s,l,r,-J,J),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,i,a)},drawPoint:function(t,e,n,i,a,o){var r,s,l,d,u,c=(o||0)*Q;if(!e||"object"!=typeof e||"[object HTMLImageElement]"!==(r=e.toString())&&"[object HTMLCanvasElement]"!==r){if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(i,a,n,0,tt),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(c)*n,a-Math.cos(c)*n),c+=it,t.lineTo(i+Math.sin(c)*n,a-Math.cos(c)*n),c+=it,t.lineTo(i+Math.sin(c)*n,a-Math.cos(c)*n),t.closePath();break;case"rectRounded":d=n-(u=.516*n),s=Math.cos(c+nt)*d,l=Math.sin(c+nt)*d,t.arc(i-s,a-l,u,c-J,c-et),t.arc(i+l,a-s,u,c-et,c),t.arc(i+s,a+l,u,c,c+et),t.arc(i-l,a+s,u,c+et,c+J),t.closePath();break;case"rect":if(!o){d=Math.SQRT1_2*n,t.rect(i-d,a-d,2*d,2*d);break}c+=nt;case"rectRot":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,a-l),t.lineTo(i+l,a-s),t.lineTo(i+s,a+l),t.lineTo(i-l,a+s),t.closePath();break;case"crossRot":c+=nt;case"cross":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s);break;case"star":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s),c+=nt,s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l),t.moveTo(i+l,a-s),t.lineTo(i-l,a+s);break;case"line":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,a-l),t.lineTo(i+s,a+l);break;case"dash":t.moveTo(i,a),t.lineTo(i+Math.cos(c)*n,a+Math.sin(c)*n)}t.fill(),t.stroke()}}else t.drawImage(e,i-e.width/2,a-e.height/2,e.width,e.height)},_isPointInArea:function(t,e){return t.x>e.left-1e-6&&t.x<e.right+1e-6&&t.y>e.top-1e-6&&t.y<e.bottom+1e-6},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,i){var a=n.steppedLine;if(a){if("middle"===a){var o=(e.x+n.x)/2;t.lineTo(o,i?n.y:e.y),t.lineTo(o,i?e.y:n.y)}else"after"===a&&!i||"after"!==a&&i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}else n.tension?t.bezierCurveTo(i?e.controlPointPreviousX:e.controlPointNextX,i?e.controlPointPreviousY:e.controlPointNextY,i?n.controlPointNextX:n.controlPointPreviousX,i?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}},ot=at;K.clear=at.clear,K.drawRoundedRectangle=function(t){t.beginPath(),at.roundedRect.apply(at,arguments)};var rt={_set:function(t,e){return K.merge(this[t]||(this[t]={}),e)}};rt._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var st=rt,lt=K.valueOrDefault,dt={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,i,a;return K.isObject(t)?(e=+t.top||0,n=+t.right||0,i=+t.bottom||0,a=+t.left||0):e=n=i=a=+t||0,{top:e,right:n,bottom:i,left:a,height:e+i,width:a+n}},_parseFont:function(t){var e=st.global,n=lt(t.fontSize,e.defaultFontSize),i={family:lt(t.fontFamily,e.defaultFontFamily),lineHeight:K.options.toLineHeight(lt(t.lineHeight,e.defaultLineHeight),n),size:n,style:lt(t.fontStyle,e.defaultFontStyle),weight:null,string:""};return i.string=function(t){return!t||K.isNullOrUndef(t.size)||K.isNullOrUndef(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(i),i},resolve:function(t,e,n){var i,a,o;for(i=0,a=t.length;i<a;++i)if(void 0!==(o=t[i])&&(void 0!==e&&"function"==typeof o&&(o=o(e)),void 0!==n&&K.isArray(o)&&(o=o[n]),void 0!==o))return o}},ut=K,ct=Z,ht=ot,ft=dt;ut.easing=ct,ut.canvas=ht,ut.options=ft;var gt=function(t){ut.extend(this,t),this.initialize.apply(this,arguments)};ut.extend(gt.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=ut.clone(t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,i=e._start,a=e._view;return n&&1!==t?(a||(a=e._view={}),i||(i=e._start={}),function(t,e,n,i){var a,o,r,s,l,d,u,c,h,f=Object.keys(n);for(a=0,o=f.length;a<o;++a)if(r=f[a],d=n[r],e.hasOwnProperty(r)||(e[r]=d),(s=e[r])!==d&&"_"!==r[0]){if(t.hasOwnProperty(r)||(t[r]=s),l=t[r],(u=typeof d)==typeof l)if("string"===u){if((c=$(l)).valid&&(h=$(d)).valid){e[r]=h.mix(c,i).rgbString();continue}}else if(ut.isFinite(l)&&ut.isFinite(d)){e[r]=l+(d-l)*i;continue}e[r]=d}}(i,a,n,t),e):(e._view=n,e._start=null,e)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return ut.isNumber(this._model.x)&&ut.isNumber(this._model.y)}}),gt.extend=ut.inherits;var pt=gt,mt=pt.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),vt=mt;Object.defineProperty(mt.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(mt.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}}),st._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:ut.noop,onComplete:ut.noop}});var bt={animations:[],request:null,addAnimation:function(t,e,n,i){var a,o,r=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,i||(t.animating=!0),a=0,o=r.length;a<o;++a)if(r[a].chart===t)return void(r[a]=e);r.push(e),1===r.length&&this.requestAnimationFrame()},cancelAnimation:function(t){var e=ut.findIndex(this.animations,function(e){return e.chart===t});-1!==e&&(this.animations.splice(e,1),t.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=ut.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){this.advance(),this.animations.length>0&&this.requestAnimationFrame()},advance:function(){for(var t,e,n,i,a=this.animations,o=0;o<a.length;)t=a[o],e=t.chart,n=t.numSteps,i=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(i,n),ut.callback(t.render,[e,t],e),ut.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(ut.callback(t.onAnimationComplete,[t],e),e.animating=!1,a.splice(o,1)):++o}},yt=ut.options.resolve,xt=["push","pop","shift","splice","unshift"];function kt(t,e){var n=t._chartjs;if(n){var i=n.listeners,a=i.indexOf(e);-1!==a&&i.splice(a,1),i.length>0||(xt.forEach(function(e){delete t[e]}),delete t._chartjs)}}var wt=function(t,e){this.initialize(t,e)};ut.extend(wt.prototype,{datasetElementType:null,dataElementType:null,initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){var t=this,e=t.getMeta(),n=t.getDataset();null!==e.xAxisID&&e.xAxisID in t.chart.scales||(e.xAxisID=n.xAxisID||t.chart.options.scales.xAxes[0].id),null!==e.yAxisID&&e.yAxisID in t.chart.scales||(e.yAxisID=n.yAxisID||t.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this.update(!0)},destroy:function(){this._data&&kt(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),i=this.getDataset().data||[],a=n.data;for(t=0,e=i.length;t<e;++t)a[t]=a[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var t,e,n=this,i=n.getDataset(),a=i.data||(i.data=[]);n._data!==a&&(n._data&&kt(n._data,n),a&&Object.isExtensible(a)&&(e=n,(t=a)._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),xt.forEach(function(e){var n="onData"+e.charAt(0).toUpperCase()+e.slice(1),i=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),a=i.apply(this,e);return ut.each(t._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),a}})}))),n._data=a),n.resyncElements()},update:ut.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],i=n.length,a=0;a<i;++a)n[a].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,i=0;for(t.dataset&&t.dataset.draw();i<n;++i)e[i].draw()},removeHoverStyle:function(t){ut.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,i=t.custom||{},a=t._model,o=ut.getHoverColor;t.$previousStyle={backgroundColor:a.backgroundColor,borderColor:a.borderColor,borderWidth:a.borderWidth},a.backgroundColor=yt([i.hoverBackgroundColor,e.hoverBackgroundColor,o(a.backgroundColor)],void 0,n),a.borderColor=yt([i.hoverBorderColor,e.hoverBorderColor,o(a.borderColor)],void 0,n),a.borderWidth=yt([i.hoverBorderWidth,e.hoverBorderWidth,a.borderWidth],void 0,n)},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,i=e.length;i<n?t.data.splice(i,n-i):i>n&&this.insertElements(n,i-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),wt.extend=ut.inherits;var Mt=wt;st._set("global",{elements:{arc:{backgroundColor:st.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var _t=pt.extend({inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var i=ut.getAngleFromPoint(n,{x:t,y:e}),a=i.angle,o=i.distance,r=n.startAngle,s=n.endAngle;s<r;)s+=2*Math.PI;for(;a>s;)a-=2*Math.PI;for(;a<r;)a+=2*Math.PI;var l=a>=r&&a<=s,d=o>=n.innerRadius&&o<=n.outerRadius;return l&&d}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,i=n.startAngle,a=n.endAngle,o="inner"===n.borderAlign?.33:0;e.save(),e.beginPath(),e.arc(n.x,n.y,Math.max(n.outerRadius-o,0),i,a),e.arc(n.x,n.y,n.innerRadius,a,i,!0),e.closePath(),e.fillStyle=n.backgroundColor,e.fill(),n.borderWidth&&("inner"===n.borderAlign?(e.beginPath(),t=o/n.outerRadius,e.arc(n.x,n.y,n.outerRadius,i-t,a+t),n.innerRadius>o?(t=o/n.innerRadius,e.arc(n.x,n.y,n.innerRadius-o,a+t,i-t,!0)):e.arc(n.x,n.y,o,a+Math.PI/2,i-Math.PI/2),e.closePath(),e.clip(),e.beginPath(),e.arc(n.x,n.y,n.outerRadius,i,a),e.arc(n.x,n.y,n.innerRadius,a,i,!0),e.closePath(),e.lineWidth=2*n.borderWidth,e.lineJoin="round"):(e.lineWidth=n.borderWidth,e.lineJoin="bevel"),e.strokeStyle=n.borderColor,e.stroke()),e.restore()}}),Ct=ut.valueOrDefault,St=st.global.defaultColor;st._set("global",{elements:{line:{tension:.4,backgroundColor:St,borderWidth:3,borderColor:St,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var Pt=pt.extend({draw:function(){var t,e,n,i,a=this._view,o=this._chart.ctx,r=a.spanGaps,s=this._children.slice(),l=st.global,d=l.elements.line,u=-1;for(this._loop&&s.length&&s.push(s[0]),o.save(),o.lineCap=a.borderCapStyle||d.borderCapStyle,o.setLineDash&&o.setLineDash(a.borderDash||d.borderDash),o.lineDashOffset=Ct(a.borderDashOffset,d.borderDashOffset),o.lineJoin=a.borderJoinStyle||d.borderJoinStyle,o.lineWidth=Ct(a.borderWidth,d.borderWidth),o.strokeStyle=a.borderColor||l.defaultColor,o.beginPath(),u=-1,t=0;t<s.length;++t)e=s[t],n=ut.previousItem(s,t),i=e._view,0===t?i.skip||(o.moveTo(i.x,i.y),u=t):(n=-1===u?n:s[u],i.skip||(u!==t-1&&!r||-1===u?o.moveTo(i.x,i.y):ut.canvas.lineTo(o,n._view,e._view),u=t));o.stroke(),o.restore()}}),It=ut.valueOrDefault,At=st.global.defaultColor;function Dt(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}st._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:At,borderColor:At,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var Tt=pt.extend({inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:Dt,inXRange:Dt,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,i=e.pointStyle,a=e.rotation,o=e.radius,r=e.x,s=e.y,l=st.global,d=l.defaultColor;e.skip||(void 0===t||ut.canvas._isPointInArea(e,t))&&(n.strokeStyle=e.borderColor||d,n.lineWidth=It(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||d,ut.canvas.drawPoint(n,i,o,r,s,a))}}),Ft=st.global.defaultColor;function Lt(t){return t&&void 0!==t.width}function Ot(t){var e,n,i,a,o;return Lt(t)?(o=t.width/2,e=t.x-o,n=t.x+o,i=Math.min(t.y,t.base),a=Math.max(t.y,t.base)):(o=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),i=t.y-o,a=t.y+o),{left:e,top:i,right:n,bottom:a}}function Rt(t,e,n){return t===e?n:t===n?e:t}function zt(t,e,n){var i,a,o,r,s=t.borderWidth,l=function(t){var e=t.borderSkipped,n={};return e?(t.horizontal?t.base>t.x&&(e=Rt(e,"left","right")):t.base<t.y&&(e=Rt(e,"bottom","top")),n[e]=!0,n):n}(t);return ut.isObject(s)?(i=+s.top||0,a=+s.right||0,o=+s.bottom||0,r=+s.left||0):i=a=o=r=+s||0,{t:l.top||i<0?0:i>n?n:i,r:l.right||a<0?0:a>e?e:a,b:l.bottom||o<0?0:o>n?n:o,l:l.left||r<0?0:r>e?e:r}}function Bt(t,e,n){var i=null===e,a=null===n,o=!(!t||i&&a)&&Ot(t);return o&&(i||e>=o.left&&e<=o.right)&&(a||n>=o.top&&n<=o.bottom)}st._set("global",{elements:{rectangle:{backgroundColor:Ft,borderColor:Ft,borderSkipped:"bottom",borderWidth:0}}});var Nt=pt.extend({draw:function(){var t=this._chart.ctx,e=this._view,n=function(t){var e=Ot(t),n=e.right-e.left,i=e.bottom-e.top,a=zt(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i},inner:{x:e.left+a.l,y:e.top+a.t,w:n-a.l-a.r,h:i-a.t-a.b}}}(e),i=n.outer,a=n.inner;t.fillStyle=e.backgroundColor,t.fillRect(i.x,i.y,i.w,i.h),i.w===a.w&&i.h===a.h||(t.save(),t.beginPath(),t.rect(i.x,i.y,i.w,i.h),t.clip(),t.fillStyle=e.borderColor,t.rect(a.x,a.y,a.w,a.h),t.fill("evenodd"),t.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return Bt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return Lt(n)?Bt(n,t,null):Bt(n,null,e)},inXRange:function(t){return Bt(this._view,t,null)},inYRange:function(t){return Bt(this._view,null,t)},getCenterPoint:function(){var t,e,n=this._view;return Lt(n)?(t=n.x,e=(n.y+n.base)/2):(t=(n.x+n.base)/2,e=n.y),{x:t,y:e}},getArea:function(){var t=this._view;return Lt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),Wt={},Et=_t,Vt=Pt,Ht=Tt,jt=Nt;Wt.Arc=Et,Wt.Line=Vt,Wt.Point=Ht,Wt.Rectangle=jt;var qt=ut.options.resolve;st._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}});var Ut=Mt.extend({dataElementType:Wt.Rectangle,initialize:function(){var t;Mt.prototype.initialize.apply(this,arguments),(t=this.getMeta()).stack=this.getDataset().stack,t.bar=!0},update:function(t){var e,n,i=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=i.length;e<n;++e)this.updateElement(i[e],e,t)},updateElement:function(t,e,n){var i=this,a=i.getMeta(),o=i.getDataset(),r=i._resolveElementOptions(t,e);t._xScale=i.getScaleForId(a.xAxisID),t._yScale=i.getScaleForId(a.yAxisID),t._datasetIndex=i.index,t._index=e,t._model={backgroundColor:r.backgroundColor,borderColor:r.borderColor,borderSkipped:r.borderSkipped,borderWidth:r.borderWidth,datasetLabel:o.label,label:i.chart.data.labels[e]},i._updateElementGeometry(t,e,n),t.pivot()},_updateElementGeometry:function(t,e,n){var i=this,a=t._model,o=i._getValueScale(),r=o.getBasePixel(),s=o.isHorizontal(),l=i._ruler||i.getRuler(),d=i.calculateBarValuePixels(i.index,e),u=i.calculateBarIndexPixels(i.index,e,l);a.horizontal=s,a.base=n?r:d.base,a.x=s?n?r:d.head:u.center,a.y=s?u.center:n?r:d.head,a.height=s?u.size:void 0,a.width=s?void 0:u.size},_getStacks:function(t){var e,n,i=this.chart,a=this._getIndexScale(),o=a.options.stacked,r=void 0===t?i.data.datasets.length:t+1,s=[];for(e=0;e<r;++e)(n=i.getDatasetMeta(e)).bar&&i.isDatasetVisible(e)&&(!1===o||!0===o&&-1===s.indexOf(n.stack)||void 0===o&&(void 0===n.stack||-1===s.indexOf(n.stack)))&&s.push(n.stack);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),i=void 0!==e?n.indexOf(e):-1;return-1===i?n.length-1:i},getRuler:function(){var t,e,n=this._getIndexScale(),i=this.getStackCount(),a=this.index,o=n.isHorizontal(),r=o?n.left:n.top,s=r+(o?n.width:n.height),l=[];for(t=0,e=this.getMeta().data.length;t<e;++t)l.push(n.getPixelForValue(null,t,a));return{min:ut.isNullOrUndef(n.options.barThickness)?function(t,e){var n,i,a,o,r=t.isHorizontal()?t.width:t.height,s=t.getTicks();for(a=1,o=e.length;a<o;++a)r=Math.min(r,Math.abs(e[a]-e[a-1]));for(a=0,o=s.length;a<o;++a)i=t.getPixelForTick(a),r=a>0?Math.min(r,i-n):r,n=i;return r}(n,l):-1,pixels:l,start:r,end:s,stackCount:i,scale:n}},calculateBarValuePixels:function(t,e){var n,i,a,o,r,s,l=this.chart,d=this.getMeta(),u=this._getValueScale(),c=u.isHorizontal(),h=l.data.datasets,f=+u.getRightValue(h[t].data[e]),g=u.options.minBarLength,p=u.options.stacked,m=d.stack,v=0;if(p||void 0===p&&void 0!==m)for(n=0;n<t;++n)(i=l.getDatasetMeta(n)).bar&&i.stack===m&&i.controller._getValueScaleId()===u.id&&l.isDatasetVisible(n)&&(a=+u.getRightValue(h[n].data[e]),(f<0&&a<0||f>=0&&a>0)&&(v+=a));return o=u.getPixelForValue(v),r=u.getPixelForValue(v+f),s=r-o,void 0!==g&&Math.abs(s)<g&&(s=g,r=f>=0&&!c||f<0&&c?o-g:o+g),{size:s,base:o,head:r,center:r+s/2}},calculateBarIndexPixels:function(t,e,n){var i=n.scale.options,a="flex"===i.barThickness?function(t,e,n){var i,a=e.pixels,o=a[t],r=t>0?a[t-1]:null,s=t<a.length-1?a[t+1]:null,l=n.categoryPercentage;return null===r&&(r=o-(null===s?e.end-e.start:s-o)),null===s&&(s=o+o-r),i=o-(o-Math.min(r,s))/2*l,{chunk:Math.abs(s-r)/2*l/e.stackCount,ratio:n.barPercentage,start:i}}(e,n,i):function(t,e,n){var i,a,o=n.barThickness,r=e.stackCount,s=e.pixels[t];return ut.isNullOrUndef(o)?(i=e.min*n.categoryPercentage,a=n.barPercentage):(i=o*r,a=1),{chunk:i/r,ratio:a,start:s-i/2}}(e,n,i),o=this.getStackIndex(t,this.getMeta().stack),r=a.start+a.chunk*o+a.chunk/2,s=Math.min(ut.valueOrDefault(i.maxBarThickness,1/0),a.chunk*a.ratio);return{base:r-s/2,head:r+s/2,center:r,size:s}},draw:function(){var t=this.chart,e=this._getValueScale(),n=this.getMeta().data,i=this.getDataset(),a=n.length,o=0;for(ut.canvas.clipArea(t.ctx,t.chartArea);o<a;++o)isNaN(e.getRightValue(i.data[o]))||n[o].draw();ut.canvas.unclipArea(t.ctx)},_resolveElementOptions:function(t,e){var n,i,a,o=this.chart,r=o.data.datasets,s=r[this.index],l=t.custom||{},d=o.options.elements.rectangle,u={},c={chart:o,dataIndex:e,dataset:s,datasetIndex:this.index},h=["backgroundColor","borderColor","borderSkipped","borderWidth"];for(n=0,i=h.length;n<i;++n)u[a=h[n]]=qt([l[a],s[a],d[a]],c,e);return u}}),Yt=ut.valueOrDefault,$t=ut.options.resolve;st._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",i=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+i.r+")"}}}});var Xt=Mt.extend({dataElementType:Wt.Point,update:function(t){var e=this,n=e.getMeta(),i=n.data;ut.each(i,function(n,i){e.updateElement(n,i,t)})},updateElement:function(t,e,n){var i=this,a=i.getMeta(),o=t.custom||{},r=i.getScaleForId(a.xAxisID),s=i.getScaleForId(a.yAxisID),l=i._resolveElementOptions(t,e),d=i.getDataset().data[e],u=i.index,c=n?r.getPixelForDecimal(.5):r.getPixelForValue("object"==typeof d?d:NaN,e,u),h=n?s.getBasePixel():s.getPixelForValue(d,e,u);t._xScale=r,t._yScale=s,t._options=l,t._datasetIndex=u,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:o.skip||isNaN(c)||isNaN(h),x:c,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,i=ut.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Yt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Yt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Yt(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveElementOptions:function(t,e){var n,i,a,o=this.chart,r=o.data.datasets,s=r[this.index],l=t.custom||{},d=o.options.elements.point,u=s.data[e],c={},h={chart:o,dataIndex:e,dataset:s,datasetIndex:this.index},f=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(n=0,i=f.length;n<i;++n)c[a=f[n]]=$t([l[a],s[a],d[a]],h,e);return c.radius=$t([l.radius,u?u.r:void 0,s.radius,d.radius],h,e),c}}),Kt=ut.options.resolve,Gt=ut.valueOrDefault;st._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,i=n.datasets,a=n.labels;if(i.length)for(var o=0;o<i[0].data.length;++o)e.push('<li><span style="background-color:'+i[0].backgroundColor[o]+'"></span>'),a[o]&&e.push(a[o]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,i){var a=t.getDatasetMeta(0),o=e.datasets[0],r=a.data[i],s=r&&r.custom||{},l=t.options.elements.arc,d=Kt([s.backgroundColor,o.backgroundColor,l.backgroundColor],void 0,i),u=Kt([s.borderColor,o.borderColor,l.borderColor],void 0,i),c=Kt([s.borderWidth,o.borderWidth,l.borderWidth],void 0,i);return{text:n,fillStyle:d,strokeStyle:u,lineWidth:c,hidden:isNaN(o.data[i])||a.data[i].hidden,index:i}}):[]}},onClick:function(t,e){var n,i,a,o=e.index,r=this.chart;for(n=0,i=(r.data.datasets||[]).length;n<i;++n)(a=r.getDatasetMeta(n)).data[o]&&(a.data[o].hidden=!a.data[o].hidden);r.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],i=": "+e.datasets[t.datasetIndex].data[t.index];return ut.isArray(n)?(n=n.slice())[0]+=i:n+=i,n}}}});var Zt=Mt.extend({dataElementType:Wt.Arc,linkScales:ut.noop,getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,i=this,a=i.chart,o=a.chartArea,r=a.options,s=o.right-o.left,l=o.bottom-o.top,d=Math.min(s,l),u={x:0,y:0},c=i.getMeta(),h=c.data,f=r.cutoutPercentage,g=r.circumference,p=i._getRingWeight(i.index);if(g<2*Math.PI){var m=r.rotation%(2*Math.PI),v=(m+=2*Math.PI*(m>=Math.PI?-1:m<-Math.PI?1:0))+g,b={x:Math.cos(m),y:Math.sin(m)},y={x:Math.cos(v),y:Math.sin(v)},x=m<=0&&v>=0||m<=2*Math.PI&&2*Math.PI<=v,k=m<=.5*Math.PI&&.5*Math.PI<=v||m<=2.5*Math.PI&&2.5*Math.PI<=v,w=m<=-Math.PI&&-Math.PI<=v||m<=Math.PI&&Math.PI<=v,M=m<=.5*-Math.PI&&.5*-Math.PI<=v||m<=1.5*Math.PI&&1.5*Math.PI<=v,_=f/100,C={x:w?-1:Math.min(b.x*(b.x<0?1:_),y.x*(y.x<0?1:_)),y:M?-1:Math.min(b.y*(b.y<0?1:_),y.y*(y.y<0?1:_))},S={x:x?1:Math.max(b.x*(b.x>0?1:_),y.x*(y.x>0?1:_)),y:k?1:Math.max(b.y*(b.y>0?1:_),y.y*(y.y>0?1:_))},P={width:.5*(S.x-C.x),height:.5*(S.y-C.y)};d=Math.min(s/P.width,l/P.height),u={x:-.5*(S.x+C.x),y:-.5*(S.y+C.y)}}for(e=0,n=h.length;e<n;++e)h[e]._options=i._resolveElementOptions(h[e],e);for(a.borderWidth=i.getMaxBorderWidth(),a.outerRadius=Math.max((d-a.borderWidth)/2,0),a.innerRadius=Math.max(f?a.outerRadius/100*f:0,0),a.radiusLength=(a.outerRadius-a.innerRadius)/(i._getVisibleDatasetWeightTotal()||1),a.offsetX=u.x*a.outerRadius,a.offsetY=u.y*a.outerRadius,c.total=i.calculateTotal(),i.outerRadius=a.outerRadius-a.radiusLength*i._getRingWeightOffset(i.index),i.innerRadius=Math.max(i.outerRadius-a.radiusLength*p,0),e=0,n=h.length;e<n;++e)i.updateElement(h[e],e,t)},updateElement:function(t,e,n){var i=this,a=i.chart,o=a.chartArea,r=a.options,s=r.animation,l=(o.left+o.right)/2,d=(o.top+o.bottom)/2,u=r.rotation,c=r.rotation,h=i.getDataset(),f=n&&s.animateRotate?0:t.hidden?0:i.calculateCircumference(h.data[e])*(r.circumference/(2*Math.PI)),g=n&&s.animateScale?0:i.innerRadius,p=n&&s.animateScale?0:i.outerRadius,m=t._options||{};ut.extend(t,{_datasetIndex:i.index,_index:e,_model:{backgroundColor:m.backgroundColor,borderColor:m.borderColor,borderWidth:m.borderWidth,borderAlign:m.borderAlign,x:l+a.offsetX,y:d+a.offsetY,startAngle:u,endAngle:c,circumference:f,outerRadius:p,innerRadius:g,label:ut.valueAtIndexOrDefault(h.label,e,a.data.labels[e])}});var v=t._model;n&&s.animateRotate||(v.startAngle=0===e?r.rotation:i.getMeta().data[e-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),t.pivot()},calculateTotal:function(){var t,e=this.getDataset(),n=this.getMeta(),i=0;return ut.each(n.data,function(n,a){t=e.data[a],isNaN(t)||n.hidden||(i+=Math.abs(t))}),i},calculateCircumference:function(t){var e=this.getMeta().total;return e>0&&!isNaN(t)?2*Math.PI*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,i,a,o,r,s,l,d=0,u=this.chart;if(!t)for(e=0,n=u.data.datasets.length;e<n;++e)if(u.isDatasetVisible(e)){i=u.getDatasetMeta(e),t=i.data,e!==this.index&&(o=i.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)a=t[e],"inner"!==(r=o?o._resolveElementOptions(a,e):a._options).borderAlign&&(s=r.borderWidth,l=r.hoverBorderWidth,d=l>(d=s>d?s:d)?l:d);return d},setHoverStyle:function(t){var e=t._model,n=t._options,i=ut.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=Gt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Gt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Gt(n.hoverBorderWidth,n.borderWidth)},_resolveElementOptions:function(t,e){var n,i,a,o=this.chart,r=this.getDataset(),s=t.custom||{},l=o.options.elements.arc,d={},u={chart:o,dataIndex:e,dataset:r,datasetIndex:this.index},c=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(n=0,i=c.length;n<i;++n)d[a=c[n]]=Kt([s[a],r[a],l[a]],u,e);return d},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(Gt(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});st._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}});var Jt=Ut.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),Qt=ut.valueOrDefault,te=ut.options.resolve,ee=ut.canvas._isPointInArea;function ne(t,e){return Qt(t.showLine,e.showLines)}st._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var ie=Mt.extend({datasetElementType:Wt.Line,dataElementType:Wt.Point,update:function(t){var e,n,i=this,a=i.getMeta(),o=a.dataset,r=a.data||[],s=i.getScaleForId(a.yAxisID),l=i.getDataset(),d=ne(l,i.chart.options);for(d&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),o._scale=s,o._datasetIndex=i.index,o._children=r,o._model=i._resolveLineOptions(o),o.pivot()),e=0,n=r.length;e<n;++e)i.updateElement(r[e],e,t);for(d&&0!==o._model.tension&&i.updateBezierControlPoints(),e=0,n=r.length;e<n;++e)r[e].pivot()},updateElement:function(t,e,n){var i,a,o=this,r=o.getMeta(),s=t.custom||{},l=o.getDataset(),d=o.index,u=l.data[e],c=o.getScaleForId(r.yAxisID),h=o.getScaleForId(r.xAxisID),f=r.dataset._model,g=o._resolvePointOptions(t,e);i=h.getPixelForValue("object"==typeof u?u:NaN,e,d),a=n?c.getBasePixel():o.calculatePointY(u,e,d),t._xScale=h,t._yScale=c,t._options=g,t._datasetIndex=d,t._index=e,t._model={x:i,y:a,skip:s.skip||isNaN(i)||isNaN(a),radius:g.radius,pointStyle:g.pointStyle,rotation:g.rotation,backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,tension:Qt(s.tension,f?f.tension:0),steppedLine:!!f&&f.steppedLine,hitRadius:g.hitRadius}},_resolvePointOptions:function(t,e){var n,i,a,o=this.chart,r=o.data.datasets[this.index],s=t.custom||{},l=o.options.elements.point,d={},u={chart:o,dataIndex:e,dataset:r,datasetIndex:this.index},c={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},h=Object.keys(c);for(n=0,i=h.length;n<i;++n)a=h[n],d[a]=te([s[a],r[c[a]],r[a],l[a]],u,e);return d},_resolveLineOptions:function(t){var e,n,i,a=this.chart,o=a.data.datasets[this.index],r=t.custom||{},s=a.options,l=s.elements.line,d={},u=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill","cubicInterpolationMode"];for(e=0,n=u.length;e<n;++e)d[i=u[e]]=te([r[i],o[i],l[i]]);return d.spanGaps=Qt(o.spanGaps,s.spanGaps),d.tension=Qt(o.lineTension,l.tension),d.steppedLine=te([r.steppedLine,o.steppedLine,l.stepped]),d},calculatePointY:function(t,e,n){var i,a,o,r=this.chart,s=this.getMeta(),l=this.getScaleForId(s.yAxisID),d=0,u=0;if(l.options.stacked){for(i=0;i<n;i++)if(a=r.data.datasets[i],"line"===(o=r.getDatasetMeta(i)).type&&o.yAxisID===l.id&&r.isDatasetVisible(i)){var c=Number(l.getRightValue(a.data[e]));c<0?u+=c||0:d+=c||0}var h=Number(l.getRightValue(t));return h<0?l.getPixelForValue(u+h):l.getPixelForValue(d+h)}return l.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,i,a=this.chart,o=this.getMeta(),r=o.dataset._model,s=a.chartArea,l=o.data||[];function d(t,e,n){return Math.max(Math.min(t,n),e)}if(r.spanGaps&&(l=l.filter(function(t){return!t._model.skip})),"monotone"===r.cubicInterpolationMode)ut.splineCurveMonotone(l);else for(t=0,e=l.length;t<e;++t)n=l[t]._model,i=ut.splineCurve(ut.previousItem(l,t)._model,n,ut.nextItem(l,t)._model,r.tension),n.controlPointPreviousX=i.previous.x,n.controlPointPreviousY=i.previous.y,n.controlPointNextX=i.next.x,n.controlPointNextY=i.next.y;if(a.options.elements.line.capBezierPoints)for(t=0,e=l.length;t<e;++t)n=l[t]._model,ee(n,s)&&(t>0&&ee(l[t-1]._model,s)&&(n.controlPointPreviousX=d(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=d(n.controlPointPreviousY,s.top,s.bottom)),t<l.length-1&&ee(l[t+1]._model,s)&&(n.controlPointNextX=d(n.controlPointNextX,s.left,s.right),n.controlPointNextY=d(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var t,e=this.chart,n=this.getMeta(),i=n.data||[],a=e.chartArea,o=i.length,r=0;for(ne(this.getDataset(),e.options)&&(t=(n.dataset._model.borderWidth||0)/2,ut.canvas.clipArea(e.ctx,{left:a.left,right:a.right,top:a.top-t,bottom:a.bottom+t}),n.dataset.draw(),ut.canvas.unclipArea(e.ctx));r<o;++r)i[r].draw(a)},setHoverStyle:function(t){var e=t._model,n=t._options,i=ut.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Qt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Qt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Qt(n.hoverBorderWidth,n.borderWidth),e.radius=Qt(n.hoverRadius,n.radius)}}),ae=ut.options.resolve;st._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,i=n.datasets,a=n.labels;if(i.length)for(var o=0;o<i[0].data.length;++o)e.push('<li><span style="background-color:'+i[0].backgroundColor[o]+'"></span>'),a[o]&&e.push(a[o]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,i){var a=t.getDatasetMeta(0),o=e.datasets[0],r=a.data[i],s=r.custom||{},l=t.options.elements.arc,d=ae([s.backgroundColor,o.backgroundColor,l.backgroundColor],void 0,i),u=ae([s.borderColor,o.borderColor,l.borderColor],void 0,i),c=ae([s.borderWidth,o.borderWidth,l.borderWidth],void 0,i);return{text:n,fillStyle:d,strokeStyle:u,lineWidth:c,hidden:isNaN(o.data[i])||a.data[i].hidden,index:i}}):[]}},onClick:function(t,e){var n,i,a,o=e.index,r=this.chart;for(n=0,i=(r.data.datasets||[]).length;n<i;++n)(a=r.getDatasetMeta(n)).data[o].hidden=!a.data[o].hidden;r.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});var oe=Mt.extend({dataElementType:Wt.Arc,linkScales:ut.noop,update:function(t){var e,n,i,a=this,o=a.getDataset(),r=a.getMeta(),s=a.chart.options.startAngle||0,l=a._starts=[],d=a._angles=[],u=r.data;for(a._updateRadius(),r.count=a.countVisibleElements(),e=0,n=o.data.length;e<n;e++)l[e]=s,i=a._computeAngle(e),d[e]=i,s+=i;for(e=0,n=u.length;e<n;++e)u[e]._options=a._resolveElementOptions(u[e],e),a.updateElement(u[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,i=e.options,a=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(a/2,0),e.innerRadius=Math.max(i.cutoutPercentage?e.outerRadius/100*i.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var i=this,a=i.chart,o=i.getDataset(),r=a.options,s=r.animation,l=a.scale,d=a.data.labels,u=l.xCenter,c=l.yCenter,h=r.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(o.data[e]),g=i._starts[e],p=g+(t.hidden?0:i._angles[e]),m=s.animateScale?0:l.getDistanceFromCenterForValue(o.data[e]),v=t._options||{};ut.extend(t,{_datasetIndex:i.index,_index:e,_scale:l,_model:{backgroundColor:v.backgroundColor,borderColor:v.borderColor,borderWidth:v.borderWidth,borderAlign:v.borderAlign,x:u,y:c,innerRadius:0,outerRadius:n?m:f,startAngle:n&&s.animateRotate?h:g,endAngle:n&&s.animateRotate?h:p,label:ut.valueAtIndexOrDefault(d,e,d[e])}}),t.pivot()},countVisibleElements:function(){var t=this.getDataset(),e=this.getMeta(),n=0;return ut.each(e.data,function(e,i){isNaN(t.data[i])||e.hidden||n++}),n},setHoverStyle:function(t){var e=t._model,n=t._options,i=ut.getHoverColor,a=ut.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=a(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=a(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=a(n.hoverBorderWidth,n.borderWidth)},_resolveElementOptions:function(t,e){var n,i,a,o=this.chart,r=this.getDataset(),s=t.custom||{},l=o.options.elements.arc,d={},u={chart:o,dataIndex:e,dataset:r,datasetIndex:this.index},c=["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"];for(n=0,i=c.length;n<i;++n)d[a=c[n]]=ae([s[a],r[a],l[a]],u,e);return d},_computeAngle:function(t){var e=this,n=this.getMeta().count,i=e.getDataset(),a=e.getMeta();if(isNaN(i.data[t])||a.data[t].hidden)return 0;var o={chart:e.chart,dataIndex:t,dataset:i,datasetIndex:e.index};return ae([e.chart.options.elements.arc.angle,2*Math.PI/n],o,t)}});st._set("pie",ut.clone(st.doughnut)),st._set("pie",{cutoutPercentage:0});var re=Zt,se=ut.valueOrDefault,le=ut.options.resolve;st._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});var de=Mt.extend({datasetElementType:Wt.Line,dataElementType:Wt.Point,linkScales:ut.noop,update:function(t){var e,n,i=this,a=i.getMeta(),o=a.dataset,r=a.data||[],s=i.chart.scale,l=i.getDataset();for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),o._scale=s,o._datasetIndex=i.index,o._children=r,o._loop=!0,o._model=i._resolveLineOptions(o),o.pivot(),e=0,n=r.length;e<n;++e)i.updateElement(r[e],e,t);for(i.updateBezierControlPoints(),e=0,n=r.length;e<n;++e)r[e].pivot()},updateElement:function(t,e,n){var i=this,a=t.custom||{},o=i.getDataset(),r=i.chart.scale,s=r.getPointPositionForValue(e,o.data[e]),l=i._resolvePointOptions(t,e),d=i.getMeta().dataset._model,u=n?r.xCenter:s.x,c=n?r.yCenter:s.y;t._scale=r,t._options=l,t._datasetIndex=i.index,t._index=e,t._model={x:u,y:c,skip:a.skip||isNaN(u)||isNaN(c),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:se(a.tension,d?d.tension:0),hitRadius:l.hitRadius}},_resolvePointOptions:function(t,e){var n,i,a,o=this.chart,r=o.data.datasets[this.index],s=t.custom||{},l=o.options.elements.point,d={},u={chart:o,dataIndex:e,dataset:r,datasetIndex:this.index},c={backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},h=Object.keys(c);for(n=0,i=h.length;n<i;++n)a=h[n],d[a]=le([s[a],r[c[a]],r[a],l[a]],u,e);return d},_resolveLineOptions:function(t){var e,n,i,a=this.chart,o=a.data.datasets[this.index],r=t.custom||{},s=a.options.elements.line,l={},d=["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"];for(e=0,n=d.length;e<n;++e)l[i=d[e]]=le([r[i],o[i],s[i]]);return l.tension=se(o.lineTension,s.tension),l},updateBezierControlPoints:function(){var t,e,n,i,a=this.getMeta(),o=this.chart.chartArea,r=a.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}for(t=0,e=r.length;t<e;++t)n=r[t]._model,i=ut.splineCurve(ut.previousItem(r,t,!0)._model,n,ut.nextItem(r,t,!0)._model,n.tension),n.controlPointPreviousX=s(i.previous.x,o.left,o.right),n.controlPointPreviousY=s(i.previous.y,o.top,o.bottom),n.controlPointNextX=s(i.next.x,o.left,o.right),n.controlPointNextY=s(i.next.y,o.top,o.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,i=ut.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=se(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=se(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=se(n.hoverBorderWidth,n.borderWidth),e.radius=se(n.hoverRadius,n.radius)}});st._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}});var ue={bar:Ut,bubble:Xt,doughnut:Zt,horizontalBar:Jt,line:ie,polarArea:oe,pie:re,radar:de,scatter:ie};function ce(t,e){return t.native?{x:t.x,y:t.y}:ut.getRelativePosition(t,e)}function he(t,e){var n,i,a,o,r,s=t.data.datasets;for(i=0,o=s.length;i<o;++i)if(t.isDatasetVisible(i))for(n=t.getDatasetMeta(i),a=0,r=n.data.length;a<r;++a){var l=n.data[a];l._view.skip||e(l)}}function fe(t,e){var n=[];return he(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function ge(t,e,n,i){var a=Number.POSITIVE_INFINITY,o=[];return he(t,function(t){if(!n||t.inRange(e.x,e.y)){var r=t.getCenterPoint(),s=i(e,r);s<a?(o=[t],a=s):s===a&&o.push(t)}}),o}function pe(t){var e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){var a=e?Math.abs(t.x-i.x):0,o=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(a,2)+Math.pow(o,2))}}function me(t,e,n){var i=ce(e,t);n.axis=n.axis||"x";var a=pe(n.axis),o=n.intersect?fe(t,i):ge(t,i,!1,a),r=[];return o.length?(t.data.datasets.forEach(function(e,n){if(t.isDatasetVisible(n)){var i=t.getDatasetMeta(n),a=i.data[o[0]._index];a&&!a._view.skip&&r.push(a)}}),r):[]}var ve={modes:{single:function(t,e){var n=ce(e,t),i=[];return he(t,function(t){if(t.inRange(n.x,n.y))return i.push(t),i}),i.slice(0,1)},label:me,index:me,dataset:function(t,e,n){var i=ce(e,t);n.axis=n.axis||"xy";var a=pe(n.axis),o=n.intersect?fe(t,i):ge(t,i,!1,a);return o.length>0&&(o=t.getDatasetMeta(o[0]._datasetIndex).data),o},"x-axis":function(t,e){return me(t,e,{intersect:!1})},point:function(t,e){var n=ce(e,t);return fe(t,n)},nearest:function(t,e,n){var i=ce(e,t);n.axis=n.axis||"xy";var a=pe(n.axis);return ge(t,i,n.intersect,a)},x:function(t,e,n){var i=ce(e,t),a=[],o=!1;return he(t,function(t){t.inXRange(i.x)&&a.push(t),t.inRange(i.x,i.y)&&(o=!0)}),n.intersect&&!o&&(a=[]),a},y:function(t,e,n){var i=ce(e,t),a=[],o=!1;return he(t,function(t){t.inYRange(i.y)&&a.push(t),t.inRange(i.x,i.y)&&(o=!0)}),n.intersect&&!o&&(a=[]),a}}};function be(t,e){return ut.where(t,function(t){return t.position===e})}function ye(t,e){t.forEach(function(t,e){return t._tmpIndex_=e,t}),t.sort(function(t,n){var i=e?n:t,a=e?t:n;return i.weight===a.weight?i._tmpIndex_-a._tmpIndex_:i.weight-a.weight}),t.forEach(function(t){delete t._tmpIndex_})}function xe(t,e){ut.each(t,function(t){e[t.position]+=t.isHorizontal()?t.height:t.width})}st._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var ke,we={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var i,a=["fullWidth","position","weight"],o=a.length,r=0;r<o;++r)i=a[r],n.hasOwnProperty(i)&&(e[i]=n[i])},update:function(t,e,n){if(t){var i=t.options.layout||{},a=ut.options.toPadding(i.padding),o=a.left,r=a.right,s=a.top,l=a.bottom,d=be(t.boxes,"left"),u=be(t.boxes,"right"),c=be(t.boxes,"top"),h=be(t.boxes,"bottom"),f=be(t.boxes,"chartArea");ye(d,!0),ye(u,!1),ye(c,!0),ye(h,!1);var g,p=d.concat(u),m=c.concat(h),v=p.concat(m),b=e-o-r,y=n-s-l,x=b/2,k=(e-x)/p.length,w=b,M=y,_={top:s,left:o,bottom:l,right:r},C=[];ut.each(v,function(t){var e,n=t.isHorizontal();n?(e=t.update(t.fullWidth?b:w,y/2),M-=e.height):(e=t.update(k,M),w-=e.width),C.push({horizontal:n,width:e.width,box:t})}),g=function(t){var e=0,n=0,i=0,a=0;return ut.each(t,function(t){if(t.getPadding){var o=t.getPadding();e=Math.max(e,o.top),n=Math.max(n,o.left),i=Math.max(i,o.bottom),a=Math.max(a,o.right)}}),{top:e,left:n,bottom:i,right:a}}(v),ut.each(p,F),xe(p,_),ut.each(m,F),xe(m,_),ut.each(p,function(t){var e=ut.findNextWhere(C,function(e){return e.box===t}),n={left:0,right:0,top:_.top,bottom:_.bottom};e&&t.update(e.width,M,n)}),xe(v,_={top:s,left:o,bottom:l,right:r});var S=Math.max(g.left-_.left,0);_.left+=S,_.right+=Math.max(g.right-_.right,0);var P=Math.max(g.top-_.top,0);_.top+=P,_.bottom+=Math.max(g.bottom-_.bottom,0);var I=n-_.top-_.bottom,A=e-_.left-_.right;A===w&&I===M||(ut.each(p,function(t){t.height=I}),ut.each(m,function(t){t.fullWidth||(t.width=A)}),M=I,w=A);var D=o+S,T=s+P;ut.each(d.concat(c),L),D+=w,T+=M,ut.each(u,L),ut.each(h,L),t.chartArea={left:_.left,top:_.top,right:_.left+w,bottom:_.top+M},ut.each(f,function(e){e.left=t.chartArea.left,e.top=t.chartArea.top,e.right=t.chartArea.right,e.bottom=t.chartArea.bottom,e.update(w,M)})}function F(t){var e=ut.findNextWhere(C,function(e){return e.box===t});if(e)if(e.horizontal){var n={left:Math.max(_.left,g.left),right:Math.max(_.right,g.right),top:0,bottom:0};t.update(t.fullWidth?b:w,y/2,n)}else t.update(e.width,M)}function L(t){t.isHorizontal()?(t.left=t.fullWidth?o:_.left,t.right=t.fullWidth?e-r:_.left+w,t.top=T,t.bottom=T+t.height,T=t.bottom):(t.left=D,t.right=D+t.width,t.top=_.top,t.bottom=_.top+M,D=t.right)}}},Me=(ke=Object.freeze({default:"/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n"}))&&ke.default||ke,_e="$chartjs",Ce="chartjs-size-monitor",Se="chartjs-render-monitor",Pe="chartjs-render-animation",Ie=["animationstart","webkitAnimationStart"],Ae={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function De(t,e){var n=ut.getStyle(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?Number(i[1]):void 0}var Te=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function Fe(t,e,n){t.addEventListener(e,n,Te)}function Le(t,e,n){t.removeEventListener(e,n,Te)}function Oe(t,e,n,i,a){return{type:t,chart:e,native:a||null,x:void 0!==n?n:null,y:void 0!==i?i:null}}function Re(t){var e=document.createElement("div");return e.className=t||"",e}function ze(t,e,n){var i,a,o,r,s=t[_e]||(t[_e]={}),l=s.resizer=function(t){var e=Re(Ce),n=Re(Ce+"-expand"),i=Re(Ce+"-shrink");n.appendChild(Re()),i.appendChild(Re()),e.appendChild(n),e.appendChild(i),e._reset=function(){n.scrollLeft=1e6,n.scrollTop=1e6,i.scrollLeft=1e6,i.scrollTop=1e6};var a=function(){e._reset(),t()};return Fe(n,"scroll",a.bind(n,"expand")),Fe(i,"scroll",a.bind(i,"shrink")),e}((i=function(){if(s.resizer){var i=n.options.maintainAspectRatio&&t.parentNode,a=i?i.clientWidth:0;e(Oe("resize",n)),i&&i.clientWidth<a&&n.canvas&&e(Oe("resize",n))}},o=!1,r=[],function(){r=Array.prototype.slice.call(arguments),a=a||this,o||(o=!0,ut.requestAnimFrame.call(window,function(){o=!1,i.apply(a,r)}))}));!function(t,e){var n=t[_e]||(t[_e]={}),i=n.renderProxy=function(t){t.animationName===Pe&&e()};ut.each(Ie,function(e){Fe(t,e,i)}),n.reflow=!!t.offsetParent,t.classList.add(Se)}(t,function(){if(s.resizer){var e=t.parentNode;e&&e!==l.parentNode&&e.insertBefore(l,e.firstChild),l._reset()}})}function Be(t){var e=t[_e]||{},n=e.resizer;delete e.resizer,function(t){var e=t[_e]||{},n=e.renderProxy;n&&(ut.each(Ie,function(e){Le(t,e,n)}),delete e.renderProxy),t.classList.remove(Se)}(t),n&&n.parentNode&&n.parentNode.removeChild(n)}var Ne={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(){var t,e,n;this._loaded||(this._loaded=!0,this.disableCSSInjection||(e=Me,n=(t=this)._style||document.createElement("style"),t._style||(t._style=n,e="/* Chart.js */\n"+e,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(e))))},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return this._ensureLoaded(),n&&n.canvas===t?(function(t,e){var n=t.style,i=t.getAttribute("height"),a=t.getAttribute("width");if(t[_e]={initial:{height:i,width:a,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===a||""===a){var o=De(t,"width");void 0!==o&&(t.width=o)}if(null===i||""===i)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var r=De(t,"height");void 0!==o&&(t.height=r)}}(t,e),n):null},releaseContext:function(t){var e=t.canvas;if(e[_e]){var n=e[_e].initial;["height","width"].forEach(function(t){var i=n[t];ut.isNullOrUndef(i)?e.removeAttribute(t):e.setAttribute(t,i)}),ut.each(n.style||{},function(t,n){e.style[n]=t}),e.width=e.width,delete e[_e]}},addEventListener:function(t,e,n){var i=t.canvas;if("resize"!==e){var a=n[_e]||(n[_e]={}),o=a.proxies||(a.proxies={}),r=o[t.id+"_"+e]=function(e){n(function(t,e){var n=Ae[t.type]||t.type,i=ut.getRelativePosition(t,e);return Oe(n,e,i.x,i.y,t)}(e,t))};Fe(i,e,r)}else ze(i,n,t)},removeEventListener:function(t,e,n){var i=t.canvas;if("resize"!==e){var a=n[_e]||{},o=a.proxies||{},r=o[t.id+"_"+e];r&&Le(i,e,r)}else Be(i)}};ut.addEvent=Fe,ut.removeEvent=Le;var We=Ne._enabled?Ne:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},Ee=ut.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},We);st._set("global",{plugins:{}});var Ve={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),this._cacheId++},unregister:function(t){var e=this._plugins;[].concat(t).forEach(function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var i,a,o,r,s,l=this.descriptors(t),d=l.length;for(i=0;i<d;++i)if(a=l[i],o=a.plugin,"function"==typeof(s=o[e])&&((r=[t].concat(n||[])).push(a.options),!1===s.apply(o,r)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var n=[],i=[],a=t&&t.config||{},o=a.options&&a.options.plugins||{};return this._plugins.concat(a.plugins||[]).forEach(function(t){var e=n.indexOf(t);if(-1===e){var a=t.id,r=o[a];!1!==r&&(!0===r&&(r=ut.clone(st.global.plugins[a])),n.push(t),i.push({plugin:t,options:r||{}}))}}),e.descriptors=i,e.id=this._cacheId,i},_invalidate:function(t){delete t.$plugins}},He={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=ut.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?ut.merge({},[st.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=ut.extend(this.defaults[t],e))},addScalesToLayout:function(t){ut.each(t.scales,function(e){e.fullWidth=e.options.fullWidth,e.position=e.options.position,e.weight=e.options.weight,we.addBox(t,e)})}},je=ut.valueOrDefault;st._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:ut.noop,title:function(t,e){var n="",i=e.labels,a=i?i.length:0;if(t.length>0){var o=t[0];o.label?n=o.label:o.xLabel?n=o.xLabel:a>0&&o.index<a&&(n=i[o.index])}return n},afterTitle:ut.noop,beforeBody:ut.noop,beforeLabel:ut.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),ut.isNullOrUndef(t.value)?n+=t.yLabel:n+=t.value,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex),i=n.data[t.index],a=i._view;return{borderColor:a.borderColor,backgroundColor:a.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:ut.noop,afterBody:ut.noop,beforeFooter:ut.noop,footer:ut.noop,afterFooter:ut.noop}}});var qe={average:function(t){if(!t.length)return!1;var e,n,i=0,a=0,o=0;for(e=0,n=t.length;e<n;++e){var r=t[e];if(r&&r.hasValue()){var s=r.tooltipPosition();i+=s.x,a+=s.y,++o}}return{x:i/o,y:a/o}},nearest:function(t,e){var n,i,a,o=e.x,r=e.y,s=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){var l=t[n];if(l&&l.hasValue()){var d=l.getCenterPoint(),u=ut.distanceBetweenPoints(e,d);u<s&&(s=u,a=l)}}if(a){var c=a.tooltipPosition();o=c.x,r=c.y}return{x:o,y:r}}};function Ue(t,e){return e&&(ut.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Ye(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function $e(t){var e=st.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,bodyFontColor:t.bodyFontColor,_bodyFontFamily:je(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:je(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:je(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:je(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:je(t.titleFontStyle,e.defaultFontStyle),titleFontSize:je(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:je(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:je(t.footerFontStyle,e.defaultFontStyle),footerFontSize:je(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function Xe(t,e){return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function Ke(t){return Ue([],Ye(t))}var Ge=pt.extend({initialize:function(){this._model=$e(this._options),this._lastActive=[]},getTitle:function(){var t=this._options,e=t.callbacks,n=e.beforeTitle.apply(this,arguments),i=e.title.apply(this,arguments),a=e.afterTitle.apply(this,arguments),o=[];return o=Ue(o,Ye(n)),o=Ue(o,Ye(i)),o=Ue(o,Ye(a))},getBeforeBody:function(){return Ke(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,e){var n=this,i=n._options.callbacks,a=[];return ut.each(t,function(t){var o={before:[],lines:[],after:[]};Ue(o.before,Ye(i.beforeLabel.call(n,t,e))),Ue(o.lines,i.label.call(n,t,e)),Ue(o.after,Ye(i.afterLabel.call(n,t,e))),a.push(o)}),a},getAfterBody:function(){return Ke(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this._options.callbacks,e=t.beforeFooter.apply(this,arguments),n=t.footer.apply(this,arguments),i=t.afterFooter.apply(this,arguments),a=[];return a=Ue(a,Ye(e)),a=Ue(a,Ye(n)),a=Ue(a,Ye(i))},update:function(t){var e,n,i,a,o,r,s,l,d,u,c=this,h=c._options,f=c._model,g=c._model=$e(h),p=c._active,m=c._data,v={xAlign:f.xAlign,yAlign:f.yAlign},b={x:f.x,y:f.y},y={width:f.width,height:f.height},x={x:f.caretX,y:f.caretY};if(p.length){g.opacity=1;var k=[],w=[];x=qe[h.position].call(c,p,c._eventPosition);var M=[];for(e=0,n=p.length;e<n;++e)M.push((i=p[e],a=void 0,o=void 0,r=void 0,s=void 0,l=void 0,d=void 0,u=void 0,a=i._xScale,o=i._yScale||i._scale,r=i._index,s=i._datasetIndex,l=i._chart.getDatasetMeta(s).controller,d=l._getIndexScale(),u=l._getValueScale(),{xLabel:a?a.getLabelForIndex(r,s):"",yLabel:o?o.getLabelForIndex(r,s):"",label:d?""+d.getLabelForIndex(r,s):"",value:u?""+u.getLabelForIndex(r,s):"",index:r,datasetIndex:s,x:i._model.x,y:i._model.y}));h.filter&&(M=M.filter(function(t){return h.filter(t,m)})),h.itemSort&&(M=M.sort(function(t,e){return h.itemSort(t,e,m)})),ut.each(M,function(t){k.push(h.callbacks.labelColor.call(c,t,c._chart)),w.push(h.callbacks.labelTextColor.call(c,t,c._chart))}),g.title=c.getTitle(M,m),g.beforeBody=c.getBeforeBody(M,m),g.body=c.getBody(M,m),g.afterBody=c.getAfterBody(M,m),g.footer=c.getFooter(M,m),g.x=x.x,g.y=x.y,g.caretPadding=h.caretPadding,g.labelColors=k,g.labelTextColors=w,g.dataPoints=M,y=function(t,e){var n=t._chart.ctx,i=2*e.yPadding,a=0,o=e.body,r=o.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);r+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,d=e.titleFontSize,u=e.bodyFontSize,c=e.footerFontSize;i+=s*d,i+=s?(s-1)*e.titleSpacing:0,i+=s?e.titleMarginBottom:0,i+=r*u,i+=r?(r-1)*e.bodySpacing:0,i+=l?e.footerMarginTop:0,i+=l*c,i+=l?(l-1)*e.footerSpacing:0;var h=0,f=function(t){a=Math.max(a,n.measureText(t).width+h)};return n.font=ut.fontString(d,e._titleFontStyle,e._titleFontFamily),ut.each(e.title,f),n.font=ut.fontString(u,e._bodyFontStyle,e._bodyFontFamily),ut.each(e.beforeBody.concat(e.afterBody),f),h=e.displayColors?u+2:0,ut.each(o,function(t){ut.each(t.before,f),ut.each(t.lines,f),ut.each(t.after,f)}),h=0,n.font=ut.fontString(c,e._footerFontStyle,e._footerFontFamily),ut.each(e.footer,f),{width:a+=2*e.xPadding,height:i}}(this,g),v=function(t,e){var n,i,a,o,r,s=t._model,l=t._chart,d=t._chart.chartArea,u="center",c="center";s.y<e.height?c="top":s.y>l.height-e.height&&(c="bottom");var h=(d.left+d.right)/2,f=(d.top+d.bottom)/2;"center"===c?(n=function(t){return t<=h},i=function(t){return t>h}):(n=function(t){return t<=e.width/2},i=function(t){return t>=l.width-e.width/2}),a=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},o=function(t){return t-e.width-s.caretSize-s.caretPadding<0},r=function(t){return t<=f?"top":"bottom"},n(s.x)?(u="left",a(s.x)&&(u="center",c=r(s.y))):i(s.x)&&(u="right",o(s.x)&&(u="center",c=r(s.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:u,yAlign:g.yAlign?g.yAlign:c}}(this,y),b=function(t,e,n,i){var a=t.x,o=t.y,r=t.caretSize,s=t.caretPadding,l=t.cornerRadius,d=n.xAlign,u=n.yAlign,c=r+s,h=l+s;return"right"===d?a-=e.width:"center"===d&&((a-=e.width/2)+e.width>i.width&&(a=i.width-e.width),a<0&&(a=0)),"top"===u?o+=c:o-="bottom"===u?e.height+c:e.height/2,"center"===u?"left"===d?a+=c:"right"===d&&(a-=c):"left"===d?a-=h:"right"===d&&(a+=h),{x:a,y:o}}(g,y,v,c._chart)}else g.opacity=0;return g.xAlign=v.xAlign,g.yAlign=v.yAlign,g.x=b.x,g.y=b.y,g.width=y.width,g.height=y.height,g.caretX=x.x,g.caretY=x.y,c._model=g,t&&h.custom&&h.custom.call(c,g),c},drawCaret:function(t,e){var n=this._chart.ctx,i=this._view,a=this.getCaretPosition(t,e,i);n.lineTo(a.x1,a.y1),n.lineTo(a.x2,a.y2),n.lineTo(a.x3,a.y3)},getCaretPosition:function(t,e,n){var i,a,o,r,s,l,d=n.caretSize,u=n.cornerRadius,c=n.xAlign,h=n.yAlign,f=t.x,g=t.y,p=e.width,m=e.height;if("center"===h)s=g+m/2,"left"===c?(a=(i=f)-d,o=i,r=s+d,l=s-d):(a=(i=f+p)+d,o=i,r=s-d,l=s+d);else if("left"===c?(i=(a=f+u+d)-d,o=a+d):"right"===c?(i=(a=f+p-u-d)-d,o=a+d):(a=n.caretX,i=a-d,o=a+d),"top"===h)s=(r=g)-d,l=r;else{s=(r=g+m)+d,l=r;var v=o;o=i,i=v}return{x1:i,x2:a,x3:o,y1:r,y2:s,y3:l}},drawTitle:function(t,e,n){var i=e.title;if(i.length){t.x=Xe(e,e._titleAlign),n.textAlign=e._titleAlign,n.textBaseline="top";var a,o,r=e.titleFontSize,s=e.titleSpacing;for(n.fillStyle=e.titleFontColor,n.font=ut.fontString(r,e._titleFontStyle,e._titleFontFamily),a=0,o=i.length;a<o;++a)n.fillText(i[a],t.x,t.y),t.y+=r+s,a+1===i.length&&(t.y+=e.titleMarginBottom-s)}},drawBody:function(t,e,n){var i,a=e.bodyFontSize,o=e.bodySpacing,r=e._bodyAlign,s=e.body,l=e.displayColors,d=e.labelColors,u=0,c=l?Xe(e,"left"):0;n.textAlign=r,n.textBaseline="top",n.font=ut.fontString(a,e._bodyFontStyle,e._bodyFontFamily),t.x=Xe(e,r);var h=function(e){n.fillText(e,t.x+u,t.y),t.y+=a+o};n.fillStyle=e.bodyFontColor,ut.each(e.beforeBody,h),u=l&&"right"!==r?"center"===r?a/2+1:a+2:0,ut.each(s,function(o,r){i=e.labelTextColors[r],n.fillStyle=i,ut.each(o.before,h),ut.each(o.lines,function(o){l&&(n.fillStyle=e.legendColorBackground,n.fillRect(c,t.y,a,a),n.lineWidth=1,n.strokeStyle=d[r].borderColor,n.strokeRect(c,t.y,a,a),n.fillStyle=d[r].backgroundColor,n.fillRect(c+1,t.y+1,a-2,a-2),n.fillStyle=i),h(o)}),ut.each(o.after,h)}),u=0,ut.each(e.afterBody,h),t.y-=o},drawFooter:function(t,e,n){var i=e.footer;i.length&&(t.x=Xe(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=e._footerAlign,n.textBaseline="top",n.fillStyle=e.footerFontColor,n.font=ut.fontString(e.footerFontSize,e._footerFontStyle,e._footerFontFamily),ut.each(i,function(i){n.fillText(i,t.x,t.y),t.y+=e.footerFontSize+e.footerSpacing}))},drawBackground:function(t,e,n,i){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var a=e.xAlign,o=e.yAlign,r=t.x,s=t.y,l=i.width,d=i.height,u=e.cornerRadius;n.beginPath(),n.moveTo(r+u,s),"top"===o&&this.drawCaret(t,i),n.lineTo(r+l-u,s),n.quadraticCurveTo(r+l,s,r+l,s+u),"center"===o&&"right"===a&&this.drawCaret(t,i),n.lineTo(r+l,s+d-u),n.quadraticCurveTo(r+l,s+d,r+l-u,s+d),"bottom"===o&&this.drawCaret(t,i),n.lineTo(r+u,s+d),n.quadraticCurveTo(r,s+d,r,s+d-u),"center"===o&&"left"===a&&this.drawCaret(t,i),n.lineTo(r,s+u),n.quadraticCurveTo(r,s,r+u,s),n.closePath(),n.fill(),e.borderWidth>0&&n.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},i={x:e.x,y:e.y},a=Math.abs(e.opacity<.001)?0:e.opacity,o=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&o&&(t.save(),t.globalAlpha=a,this.drawBackground(i,e,t,n),i.y+=e.yPadding,this.drawTitle(i,e,t),this.drawBody(i,e,t),this.drawFooter(i,e,t),t.restore())}},handleEvent:function(t){var e=this,n=e._options,i=!1;return e._lastActive=e._lastActive||[],"mouseout"===t.type?e._active=[]:e._active=e._chart.getElementsAtEventForMode(t,n.mode,n),(i=!ut.arrayEquals(e._active,e._lastActive))&&(e._lastActive=e._active,(n.enabled||n.custom)&&(e._eventPosition={x:t.x,y:t.y},e.update(!0),e.pivot())),i}}),Ze=qe,Je=Ge;Je.positioners=Ze;var Qe=ut.valueOrDefault;function tn(){return ut.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){if("xAxes"===t||"yAxes"===t){var a,o,r,s=n[t].length;for(e[t]||(e[t]=[]),a=0;a<s;++a)r=n[t][a],o=Qe(r.type,"xAxes"===t?"category":"linear"),a>=e[t].length&&e[t].push({}),!e[t][a].type||r.type&&r.type!==e[t][a].type?ut.merge(e[t][a],[He.getScaleDefaults(o),r]):ut.merge(e[t][a],r)}else ut._merger(t,e,n,i)}})}function en(){return ut.merge({},[].slice.call(arguments),{merger:function(t,e,n,i){var a=e[t]||{},o=n[t];"scales"===t?e[t]=tn(a,o):"scale"===t?e[t]=ut.merge(a,[He.getScaleDefaults(o.type),o]):ut._merger(t,e,n,i)}})}function nn(t){return"top"===t||"bottom"===t}st._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var an=function(t,e){return this.construct(t,e),this};ut.extend(an.prototype,{construct:function(t,e){var n=this;e=function(t){var e=(t=t||{}).data=t.data||{};return e.datasets=e.datasets||[],e.labels=e.labels||[],t.options=en(st.global,st[t.type],t.options||{}),t}(e);var i=Ee.acquireContext(t,e),a=i&&i.canvas,o=a&&a.height,r=a&&a.width;n.id=ut.uid(),n.ctx=i,n.canvas=a,n.config=e,n.width=r,n.height=o,n.aspectRatio=o?r/o:null,n.options=e.options,n._bufferedRender=!1,n.chart=n,n.controller=n,an.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(t){n.config.data=t}}),i&&a?(n.initialize(),n.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return Ve.notify(t,"beforeInit"),ut.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.initToolTip(),Ve.notify(t,"afterInit"),t},clear:function(){return ut.canvas.clear(this),this},stop:function(){return bt.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,i=e.canvas,a=n.maintainAspectRatio&&e.aspectRatio||null,o=Math.max(0,Math.floor(ut.getMaximumWidth(i))),r=Math.max(0,Math.floor(a?o/a:ut.getMaximumHeight(i)));if((e.width!==o||e.height!==r)&&(i.width=e.width=o,i.height=e.height=r,i.style.width=o+"px",i.style.height=r+"px",ut.retinaScale(e,n.devicePixelRatio),!t)){var s={width:o,height:r};Ve.notify(e,"resize",[s]),n.onResize&&n.onResize(e,s),e.stop(),e.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,e=t.scales||{},n=t.scale;ut.each(e.xAxes,function(t,e){t.id=t.id||"x-axis-"+e}),ut.each(e.yAxes,function(t,e){t.id=t.id||"y-axis-"+e}),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var t=this,e=t.options,n=t.scales||{},i=[],a=Object.keys(n).reduce(function(t,e){return t[e]=!1,t},{});e.scales&&(i=i.concat((e.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(e.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),e.scale&&i.push({options:e.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),ut.each(i,function(e){var i=e.options,o=i.id,r=Qe(i.type,e.dtype);nn(i.position)!==nn(e.dposition)&&(i.position=e.dposition),a[o]=!0;var s=null;if(o in n&&n[o].type===r)(s=n[o]).options=i,s.ctx=t.ctx,s.chart=t;else{var l=He.getScaleConstructor(r);if(!l)return;s=new l({id:o,type:r,options:i,ctx:t.ctx,chart:t}),n[s.id]=s}s.mergeTicksOptions(),e.isDefault&&(t.scale=s)}),ut.each(a,function(t,e){t||delete n[e]}),t.scales=n,He.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t=this,e=[];return ut.each(t.data.datasets,function(n,i){var a=t.getDatasetMeta(i),o=n.type||t.config.type;if(a.type&&a.type!==o&&(t.destroyDatasetMeta(i),a=t.getDatasetMeta(i)),a.type=o,a.controller)a.controller.updateIndex(i),a.controller.linkScales();else{var r=ue[a.type];if(void 0===r)throw new Error('"'+a.type+'" is not a chart type.');a.controller=new r(t,i),e.push(a.controller)}},t),e},resetElements:function(){var t=this;ut.each(t.data.datasets,function(e,n){t.getDatasetMeta(n).controller.reset()},t)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e,n,i=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),n=(e=i).options,ut.each(e.scales,function(t){we.removeBox(e,t)}),n=en(st.global,st[e.config.type],n),e.options=e.config.options=n,e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.tooltip._options=n.tooltips,e.tooltip.initialize(),Ve._invalidate(i),!1!==Ve.notify(i,"beforeUpdate")){i.tooltip._data=i.data;var a=i.buildOrUpdateControllers();ut.each(i.data.datasets,function(t,e){i.getDatasetMeta(e).controller.buildOrUpdateElements()},i),i.updateLayout(),i.options.animation&&i.options.animation.duration&&ut.each(a,function(t){t.reset()}),i.updateDatasets(),i.tooltip.initialize(),i.lastActive=[],Ve.notify(i,"afterUpdate"),i._bufferedRender?i._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:i.render(t)}},updateLayout:function(){!1!==Ve.notify(this,"beforeLayout")&&(we.update(this,this.width,this.height),Ve.notify(this,"afterScaleUpdate"),Ve.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==Ve.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);Ve.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==Ve.notify(this,"beforeDatasetUpdate",[n])&&(e.controller.update(),Ve.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,i=Qe(t.duration,n&&n.duration),a=t.lazy;if(!1!==Ve.notify(e,"beforeRender")){var o=function(t){Ve.notify(e,"afterRender"),ut.callback(n&&n.onComplete,[t],e)};if(n&&i){var r=new vt({numSteps:i/16.66,easing:t.easing||n.easing,render:function(t,e){var n=ut.easing.effects[e.easing],i=e.currentStep,a=i/e.numSteps;t.draw(n(a),a,i)},onAnimationProgress:n.onProgress,onAnimationComplete:o});bt.addAnimation(e,r,i,a)}else e.draw(),o(new vt({numSteps:0,chart:e}));return e}},draw:function(t){var e=this;e.clear(),ut.isNullOrUndef(t)&&(t=1),e.transition(t),e.width<=0||e.height<=0||!1!==Ve.notify(e,"beforeDraw",[t])&&(ut.each(e.boxes,function(t){t.draw(e.chartArea)},e),e.drawDatasets(t),e._drawTooltip(t),Ve.notify(e,"afterDraw",[t]))},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},drawDatasets:function(t){var e=this;if(!1!==Ve.notify(e,"beforeDatasetsDraw",[t])){for(var n=(e.data.datasets||[]).length-1;n>=0;--n)e.isDatasetVisible(n)&&e.drawDataset(n,t);Ve.notify(e,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n=this.getDatasetMeta(t),i={meta:n,index:t,easingValue:e};!1!==Ve.notify(this,"beforeDatasetDraw",[i])&&(n.controller.draw(e),Ve.notify(this,"afterDatasetDraw",[i]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==Ve.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),Ve.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return ve.modes.single(this,t)},getElementsAtEvent:function(t){return ve.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return ve.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var i=ve.modes[e];return"function"==typeof i?i(this,t,n):[]},getDatasetAtEvent:function(t){return ve.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n||(n=e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),n},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],i=n._meta&&n._meta[e];i&&(i.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,i=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),ut.canvas.clear(n),Ee.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Ve.notify(n,"destroy"),delete an.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new Je({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var t=this,e=t._listeners={},n=function(){t.eventHandler.apply(t,arguments)};ut.each(t.options.events,function(i){Ee.addEventListener(t,i,n),e[i]=n}),t.options.responsive&&(n=function(){t.resize()},Ee.addEventListener(t,"resize",n),e.resize=n)},unbindEvents:function(){var t=this,e=t._listeners;e&&(delete t._listeners,ut.each(e,function(e,n){Ee.removeEventListener(t,n,e)}))},updateHoverStyle:function(t,e,n){var i,a,o,r=n?"setHoverStyle":"removeHoverStyle";for(a=0,o=t.length;a<o;++a)(i=t[a])&&this.getDatasetMeta(i._datasetIndex).controller[r](i)},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==Ve.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var i=e.handleEvent(t);n&&(i=n._start?n.handleEvent(t):i|n.handleEvent(t)),Ve.notify(e,"afterEvent",[t]);var a=e._bufferedRequest;return a?e.render(a):i&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e=this,n=e.options||{},i=n.hover,a=!1;return e.lastActive=e.lastActive||[],"mouseout"===t.type?e.active=[]:e.active=e.getElementsAtEventForMode(t,i.mode,i),ut.callback(n.onHover||n.hover.onHover,[t.native,e.active],e),"mouseup"!==t.type&&"click"!==t.type||n.onClick&&n.onClick.call(e,t.native,e.active),e.lastActive.length&&e.updateHoverStyle(e.lastActive,i.mode,!1),e.active.length&&i.mode&&e.updateHoverStyle(e.active,i.mode,!0),a=!ut.arrayEquals(e.active,e.lastActive),e.lastActive=e.active,a}}),an.instances={};var on=an;function rn(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function sn(t){this.options=t||{}}an.Controller=an,an.types={},ut.configMerge=en,ut.scaleMerge=tn,ut.extend(sn.prototype,{formats:rn,parse:rn,format:rn,add:rn,diff:rn,startOf:rn,endOf:rn,_create:function(t){return t}}),sn.override=function(t){ut.extend(sn.prototype,t)};var ln={_date:sn},dn={formatters:{values:function(t){return ut.isArray(t)?t:""+t},linear:function(t,e,n){var i=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(i)>1&&t!==Math.floor(t)&&(i=t-Math.floor(t));var a=ut.log10(Math.abs(i)),o="";if(0!==t){var r=Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]));if(r<1e-4){var s=ut.log10(Math.abs(t));o=t.toExponential(Math.floor(s)-Math.floor(a))}else{var l=-1*Math.floor(a);l=Math.max(Math.min(l,20),0),o=t.toFixed(l)}}else o="0";return o},logarithmic:function(t,e,n){var i=t/Math.pow(10,Math.floor(ut.log10(t)));return 0===t?"0":1===i||2===i||5===i||0===e||e===n.length-1?t.toExponential():""}}},un=ut.valueOrDefault,cn=ut.valueAtIndexOrDefault;function hn(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(t[e].label);return i}function fn(t,e,n){return ut.isArray(e)?ut.longestText(t,n,e):t.measureText(e).width}st._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:dn.formatters.values,minor:{},major:{}}});var gn=pt.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var t=this.options.ticks;for(var e in!1===t.minor&&(t.minor={display:!1}),!1===t.major&&(t.major={display:!1}),t)"major"!==e&&"minor"!==e&&(void 0===t.minor[e]&&(t.minor[e]=t[e]),void 0===t.major[e]&&(t.major[e]=t[e]))},beforeUpdate:function(){ut.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var i,a,o,r,s,l,d=this;for(d.beforeUpdate(),d.maxWidth=t,d.maxHeight=e,d.margins=ut.extend({left:0,right:0,top:0,bottom:0},n),d._maxLabelLines=0,d.longestLabelWidth=0,d.longestTextCache=d.longestTextCache||{},d.beforeSetDimensions(),d.setDimensions(),d.afterSetDimensions(),d.beforeDataLimits(),d.determineDataLimits(),d.afterDataLimits(),d.beforeBuildTicks(),s=d.buildTicks()||[],s=d.afterBuildTicks(s)||s,d.beforeTickToLabelConversion(),o=d.convertTicksToLabels(s)||d.ticks,d.afterTickToLabelConversion(),d.ticks=o,i=0,a=o.length;i<a;++i)r=o[i],(l=s[i])?l.label=r:s.push(l={label:r,major:!1});return d._ticks=s,d.beforeCalculateTickRotation(),d.calculateTickRotation(),d.afterCalculateTickRotation(),d.beforeFit(),d.fit(),d.afterFit(),d.afterUpdate(),d.minSize},afterUpdate:function(){ut.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){ut.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){ut.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){ut.callback(this.options.beforeDataLimits,[this])},determineDataLimits:ut.noop,afterDataLimits:function(){ut.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){ut.callback(this.options.beforeBuildTicks,[this])},buildTicks:ut.noop,afterBuildTicks:function(t){var e=this;return ut.isArray(t)&&t.length?ut.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=ut.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){ut.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){ut.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){ut.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t=this,e=t.ctx,n=t.options.ticks,i=hn(t._ticks),a=ut.options._parseFont(n);e.font=a.string;var o=n.minRotation||0;if(i.length&&t.options.display&&t.isHorizontal())for(var r,s=ut.longestText(e,a.string,i,t.longestTextCache),l=s,d=t.getPixelForTick(1)-t.getPixelForTick(0)-6;l>d&&o<n.maxRotation;){var u=ut.toRadians(o);if(r=Math.cos(u),Math.sin(u)*s>t.maxHeight){o--;break}o++,l=r*s}t.labelRotation=o},afterCalculateTickRotation:function(){ut.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){ut.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=hn(t._ticks),i=t.options,a=i.ticks,o=i.scaleLabel,r=i.gridLines,s=t._isVisible(),l=i.position,d=t.isHorizontal(),u=ut.options._parseFont,c=u(a),h=i.gridLines.tickMarkLength;if(e.width=d?t.isFullWidth()?t.maxWidth-t.margins.left-t.margins.right:t.maxWidth:s&&r.drawTicks?h:0,e.height=d?s&&r.drawTicks?h:0:t.maxHeight,o.display&&s){var f=u(o),g=ut.options.toPadding(o.padding),p=f.lineHeight+g.height;d?e.height+=p:e.width+=p}if(a.display&&s){var m=ut.longestText(t.ctx,c.string,n,t.longestTextCache),v=ut.numberOfLabelLines(n),b=.5*c.size,y=t.options.ticks.padding;if(t._maxLabelLines=v,t.longestLabelWidth=m,d){var x=ut.toRadians(t.labelRotation),k=Math.cos(x),w=Math.sin(x),M=w*m+c.lineHeight*v+b;e.height=Math.min(t.maxHeight,e.height+M+y),t.ctx.font=c.string;var _,C,S=fn(t.ctx,n[0],c.string),P=fn(t.ctx,n[n.length-1],c.string),I=t.getPixelForTick(0)-t.left,A=t.right-t.getPixelForTick(n.length-1);0!==t.labelRotation?(_="bottom"===l?k*S:k*b,C="bottom"===l?k*b:k*P):(_=S/2,C=P/2),t.paddingLeft=Math.max(_-I,0)+3,t.paddingRight=Math.max(C-A,0)+3}else a.mirror?m=0:m+=y+b,e.width=Math.min(t.maxWidth,e.width+m),t.paddingTop=c.size/2,t.paddingBottom=c.size/2}t.handleMargins(),t.width=e.width,t.height=e.height},handleMargins:function(){var t=this;t.margins&&(t.paddingLeft=Math.max(t.paddingLeft-t.margins.left,0),t.paddingTop=Math.max(t.paddingTop-t.margins.top,0),t.paddingRight=Math.max(t.paddingRight-t.margins.right,0),t.paddingBottom=Math.max(t.paddingBottom-t.margins.bottom,0))},afterFit:function(){ut.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(ut.isNullOrUndef(t))return NaN;if(("number"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},getLabelForIndex:ut.noop,getPixelForValue:ut.noop,getValueForPixel:ut.noop,getPixelForTick:function(t){var e=this,n=e.options.offset;if(e.isHorizontal()){var i=e.width-(e.paddingLeft+e.paddingRight),a=i/Math.max(e._ticks.length-(n?0:1),1),o=a*t+e.paddingLeft;n&&(o+=a/2);var r=e.left+o;return r+=e.isFullWidth()?e.margins.left:0}var s=e.height-(e.paddingTop+e.paddingBottom);return e.top+t*(s/(e._ticks.length-1))},getPixelForDecimal:function(t){var e=this;if(e.isHorizontal()){var n=e.width-(e.paddingLeft+e.paddingRight),i=n*t+e.paddingLeft,a=e.left+i;return a+=e.isFullWidth()?e.margins.left:0}return e.top+t*e.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0},_autoSkip:function(t){var e,n,i=this,a=i.isHorizontal(),o=i.options.ticks.minor,r=t.length,s=!1,l=o.maxTicksLimit,d=i._tickSize()*(r-1),u=a?i.width-(i.paddingLeft+i.paddingRight):i.height-(i.paddingTop+i.PaddingBottom),c=[];for(d>u&&(s=1+Math.floor(d/u)),r>l&&(s=Math.max(s,1+Math.floor(r/l))),e=0;e<r;e++)n=t[e],s>1&&e%s>0&&delete n.label,c.push(n);return c},_tickSize:function(){var t=this,e=t.isHorizontal(),n=t.options.ticks.minor,i=ut.toRadians(t.labelRotation),a=Math.abs(Math.cos(i)),o=Math.abs(Math.sin(i)),r=n.autoSkipPadding||0,s=t.longestLabelWidth+r||0,l=ut.options._parseFont(n),d=t._maxLabelLines*l.lineHeight+r||0;return e?d*a>s*o?s/a:d/o:d*o<s*a?d/a:s/o},_isVisible:function(){var t,e,n,i=this.chart,a=this.options.display;if("auto"!==a)return!!a;for(t=0,e=i.data.datasets.length;t<e;++t)if(i.isDatasetVisible(t)&&((n=i.getDatasetMeta(t)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},draw:function(t){var e=this,n=e.options;if(e._isVisible()){var i,a,o,r=e.chart,s=e.ctx,l=st.global,d=l.defaultFontColor,u=n.ticks.minor,c=n.ticks.major||u,h=n.gridLines,f=n.scaleLabel,g=n.position,p=0!==e.labelRotation,m=u.mirror,v=e.isHorizontal(),b=ut.options._parseFont,y=u.display&&u.autoSkip?e._autoSkip(e.getTicks()):e.getTicks(),x=un(u.fontColor,d),k=b(u),w=k.lineHeight,M=un(c.fontColor,d),_=b(c),C=u.padding,S=u.labelOffset,P=h.drawTicks?h.tickMarkLength:0,I=un(f.fontColor,d),A=b(f),D=ut.options.toPadding(f.padding),T=ut.toRadians(e.labelRotation),F=[],L=h.drawBorder?cn(h.lineWidth,0,0):0,O=ut._alignPixel;if("top"===g?(i=O(r,e.bottom,L),a=e.bottom-P,o=i-L/2):"bottom"===g?(i=O(r,e.top,L),a=i+L/2,o=e.top+P):"left"===g?(i=O(r,e.right,L),a=e.right-P,o=i-L/2):(i=O(r,e.left,L),a=i+L/2,o=e.left+P),ut.each(y,function(i,s){if(!ut.isNullOrUndef(i.label)){var l,d,u,c,f,b,y,x,k,M,_,I,A,D,R,z,B=i.label;s===e.zeroLineIndex&&n.offset===h.offsetGridLines?(l=h.zeroLineWidth,d=h.zeroLineColor,u=h.zeroLineBorderDash||[],c=h.zeroLineBorderDashOffset||0):(l=cn(h.lineWidth,s),d=cn(h.color,s),u=h.borderDash||[],c=h.borderDashOffset||0);var N=ut.isArray(B)?B.length:1,W=function(t,e,n){var i=t.getPixelForTick(e);return n&&(1===t.getTicks().length?i-=t.isHorizontal()?Math.max(i-t.left,t.right-i):Math.max(i-t.top,t.bottom-i):i-=0===e?(t.getPixelForTick(1)-i)/2:(i-t.getPixelForTick(e-1))/2),i}(e,s,h.offsetGridLines);if(v){var E=P+C;W<e.left-1e-7&&(d="rgba(0,0,0,0)"),f=y=k=_=O(r,W,l),b=a,x=o,A=e.getPixelForTick(s)+S,"top"===g?(M=O(r,t.top,L)+L/2,I=t.bottom,R=((p?1:.5)-N)*w,z=p?"left":"center",D=e.bottom-E):(M=t.top,I=O(r,t.bottom,L)-L/2,R=(p?0:.5)*w,z=p?"right":"center",D=e.top+E)}else{var V=(m?0:P)+C;W<e.top-1e-7&&(d="rgba(0,0,0,0)"),f=a,y=o,b=x=M=I=O(r,W,l),D=e.getPixelForTick(s)+S,R=(1-N)*w/2,"left"===g?(k=O(r,t.left,L)+L/2,_=t.right,z=m?"left":"right",A=e.right-V):(k=t.left,_=O(r,t.right,L)-L/2,z=m?"right":"left",A=e.left+V)}F.push({tx1:f,ty1:b,tx2:y,ty2:x,x1:k,y1:M,x2:_,y2:I,labelX:A,labelY:D,glWidth:l,glColor:d,glBorderDash:u,glBorderDashOffset:c,rotation:-1*T,label:B,major:i.major,textOffset:R,textAlign:z})}}),ut.each(F,function(t){var e=t.glWidth,n=t.glColor;if(h.display&&e&&n&&(s.save(),s.lineWidth=e,s.strokeStyle=n,s.setLineDash&&(s.setLineDash(t.glBorderDash),s.lineDashOffset=t.glBorderDashOffset),s.beginPath(),h.drawTicks&&(s.moveTo(t.tx1,t.ty1),s.lineTo(t.tx2,t.ty2)),h.drawOnChartArea&&(s.moveTo(t.x1,t.y1),s.lineTo(t.x2,t.y2)),s.stroke(),s.restore()),u.display){s.save(),s.translate(t.labelX,t.labelY),s.rotate(t.rotation),s.font=t.major?_.string:k.string,s.fillStyle=t.major?M:x,s.textBaseline="middle",s.textAlign=t.textAlign;var i=t.label,a=t.textOffset;if(ut.isArray(i))for(var o=0;o<i.length;++o)s.fillText(""+i[o],0,a),a+=w;else s.fillText(i,0,a);s.restore()}}),f.display){var R,z,B=0,N=A.lineHeight/2;if(v)R=e.left+(e.right-e.left)/2,z="bottom"===g?e.bottom-N-D.bottom:e.top+N+D.top;else{var W="left"===g;R=W?e.left+N+D.top:e.right-N-D.top,z=e.top+(e.bottom-e.top)/2,B=W?-.5*Math.PI:.5*Math.PI}s.save(),s.translate(R,z),s.rotate(B),s.textAlign="center",s.textBaseline="middle",s.fillStyle=I,s.font=A.string,s.fillText(f.labelString,0,0),s.restore()}if(L){var E,V,H,j,q=L,U=cn(h.lineWidth,y.length-1,0);v?(E=O(r,e.left,q)-q/2,V=O(r,e.right,U)+U/2,H=j=i):(H=O(r,e.top,q)-q/2,j=O(r,e.bottom,U)+U/2,E=V=i),s.lineWidth=L,s.strokeStyle=cn(h.color,0),s.beginPath(),s.moveTo(E,H),s.lineTo(V,j),s.stroke()}}}}),pn=gn.extend({getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels},determineDataLimits:function(){var t,e=this,n=e.getLabels();e.minIndex=0,e.maxIndex=n.length-1,void 0!==e.options.ticks.min&&(t=n.indexOf(e.options.ticks.min),e.minIndex=-1!==t?t:e.minIndex),void 0!==e.options.ticks.max&&(t=n.indexOf(e.options.ticks.max),e.maxIndex=-1!==t?t:e.maxIndex),e.min=n[e.minIndex],e.max=n[e.maxIndex]},buildTicks:function(){var t=this,e=t.getLabels();t.ticks=0===t.minIndex&&t.maxIndex===e.length-1?e:e.slice(t.minIndex,t.maxIndex+1)},getLabelForIndex:function(t,e){var n=this,i=n.chart;return i.getDatasetMeta(e).controller._getValueScaleId()===n.id?n.getRightValue(i.data.datasets[e].data[t]):n.ticks[t-n.minIndex]},getPixelForValue:function(t,e){var n,i=this,a=i.options.offset,o=Math.max(i.maxIndex+1-i.minIndex-(a?0:1),1);if(null!=t&&(n=i.isHorizontal()?t.x:t.y),void 0!==n||void 0!==t&&isNaN(e)){var r=i.getLabels();t=n||t;var s=r.indexOf(t);e=-1!==s?s:e}if(i.isHorizontal()){var l=i.width/o,d=l*(e-i.minIndex);return a&&(d+=l/2),i.left+d}var u=i.height/o,c=u*(e-i.minIndex);return a&&(c+=u/2),i.top+c},getPixelForTick:function(t){return this.getPixelForValue(this.ticks[t],t+this.minIndex,null)},getValueForPixel:function(t){var e=this,n=e.options.offset,i=Math.max(e._ticks.length-(n?0:1),1),a=e.isHorizontal(),o=(a?e.width:e.height)/i;return t-=a?e.left:e.top,n&&(t-=o/2),(t<=0?0:Math.round(t/o))+e.minIndex},getBasePixel:function(){return this.bottom}}),mn={position:"bottom"};pn._defaults=mn;var vn=ut.noop,bn=ut.isNullOrUndef,yn=gn.extend({getRightValue:function(t){return"string"==typeof t?+t:gn.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options,n=e.ticks;if(n.beginAtZero){var i=ut.sign(t.min),a=ut.sign(t.max);i<0&&a<0?t.max=0:i>0&&a>0&&(t.min=0)}var o=void 0!==n.min||void 0!==n.suggestedMin,r=void 0!==n.max||void 0!==n.suggestedMax;void 0!==n.min?t.min=n.min:void 0!==n.suggestedMin&&(null===t.min?t.min=n.suggestedMin:t.min=Math.min(t.min,n.suggestedMin)),void 0!==n.max?t.max=n.max:void 0!==n.suggestedMax&&(null===t.max?t.max=n.suggestedMax:t.max=Math.max(t.max,n.suggestedMax)),o!==r&&t.min>=t.max&&(o?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,n.beginAtZero||t.min--)},getTickLimit:function(){var t,e=this.options.ticks,n=e.stepSize,i=e.maxTicksLimit;return n?t=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(t=this._computeTickLimit(),i=i||11),i&&(t=Math.min(i,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:vn,buildTicks:function(){var t=this,e=t.options,n=e.ticks,i=t.getTickLimit(),a={maxTicks:i=Math.max(2,i),min:n.min,max:n.max,precision:n.precision,stepSize:ut.valueOrDefault(n.fixedStepSize,n.stepSize)},o=t.ticks=function(t,e){var n,i,a,o,r=[],s=t.stepSize,l=s||1,d=t.maxTicks-1,u=t.min,c=t.max,h=t.precision,f=e.min,g=e.max,p=ut.niceNum((g-f)/d/l)*l;if(p<1e-14&&bn(u)&&bn(c))return[f,g];(o=Math.ceil(g/p)-Math.floor(f/p))>d&&(p=ut.niceNum(o*p/d/l)*l),s||bn(h)?n=Math.pow(10,ut._decimalPlaces(p)):(n=Math.pow(10,h),p=Math.ceil(p*n)/n),i=Math.floor(f/p)*p,a=Math.ceil(g/p)*p,s&&(!bn(u)&&ut.almostWhole(u/p,p/1e3)&&(i=u),!bn(c)&&ut.almostWhole(c/p,p/1e3)&&(a=c)),o=(a-i)/p,o=ut.almostEquals(o,Math.round(o),p/1e3)?Math.round(o):Math.ceil(o),i=Math.round(i*n)/n,a=Math.round(a*n)/n,r.push(bn(u)?i:u);for(var m=1;m<o;++m)r.push(Math.round((i+m*p)*n)/n);return r.push(bn(c)?a:c),r}(a,t);t.handleDirectionalChanges(),t.max=ut.max(o),t.min=ut.min(o),n.reverse?(o.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),gn.prototype.convertTicksToLabels.call(t)}}),xn={position:"left",ticks:{callback:dn.formatters.linear}},kn=yn.extend({determineDataLimits:function(){var t=this,e=t.options,n=t.chart,i=n.data,a=i.datasets,o=t.isHorizontal();function r(e){return o?e.xAxisID===t.id:e.yAxisID===t.id}t.min=null,t.max=null;var s=e.stacked;if(void 0===s&&ut.each(a,function(t,e){if(!s){var i=n.getDatasetMeta(e);n.isDatasetVisible(e)&&r(i)&&void 0!==i.stack&&(s=!0)}}),e.stacked||s){var l={};ut.each(a,function(i,a){var o=n.getDatasetMeta(a),s=[o.type,void 0===e.stacked&&void 0===o.stack?a:"",o.stack].join(".");void 0===l[s]&&(l[s]={positiveValues:[],negativeValues:[]});var d=l[s].positiveValues,u=l[s].negativeValues;n.isDatasetVisible(a)&&r(o)&&ut.each(i.data,function(n,i){var a=+t.getRightValue(n);isNaN(a)||o.data[i].hidden||(d[i]=d[i]||0,u[i]=u[i]||0,e.relativePoints?d[i]=100:a<0?u[i]+=a:d[i]+=a)})}),ut.each(l,function(e){var n=e.positiveValues.concat(e.negativeValues),i=ut.min(n),a=ut.max(n);t.min=null===t.min?i:Math.min(t.min,i),t.max=null===t.max?a:Math.max(t.max,a)})}else ut.each(a,function(e,i){var a=n.getDatasetMeta(i);n.isDatasetVisible(i)&&r(a)&&ut.each(e.data,function(e,n){var i=+t.getRightValue(e);isNaN(i)||a.data[n].hidden||(null===t.min?t.min=i:i<t.min&&(t.min=i),null===t.max?t.max=i:i>t.max&&(t.max=i))})});t.min=isFinite(t.min)&&!isNaN(t.min)?t.min:0,t.max=isFinite(t.max)&&!isNaN(t.max)?t.max:1,this.handleTickRangeOptions()},_computeTickLimit:function(){var t;return this.isHorizontal()?Math.ceil(this.width/40):(t=ut.options._parseFont(this.options.ticks),Math.ceil(this.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){var e=this,n=e.start,i=+e.getRightValue(t),a=e.end-n;return e.isHorizontal()?e.left+e.width/a*(i-n):e.bottom-e.height/a*(i-n)},getValueForPixel:function(t){var e=this,n=e.isHorizontal(),i=n?e.width:e.height,a=(n?t-e.left:e.bottom-t)/i;return e.start+(e.end-e.start)*a},getPixelForTick:function(t){return this.getPixelForValue(this.ticksAsNumbers[t])}}),wn=xn;kn._defaults=wn;var Mn=ut.valueOrDefault,_n={position:"left",ticks:{callback:dn.formatters.logarithmic}};function Cn(t,e){return ut.isFinite(t)&&t>=0?t:e}var Sn=gn.extend({determineDataLimits:function(){var t=this,e=t.options,n=t.chart,i=n.data,a=i.datasets,o=t.isHorizontal();function r(e){return o?e.xAxisID===t.id:e.yAxisID===t.id}t.min=null,t.max=null,t.minNotZero=null;var s=e.stacked;if(void 0===s&&ut.each(a,function(t,e){if(!s){var i=n.getDatasetMeta(e);n.isDatasetVisible(e)&&r(i)&&void 0!==i.stack&&(s=!0)}}),e.stacked||s){var l={};ut.each(a,function(i,a){var o=n.getDatasetMeta(a),s=[o.type,void 0===e.stacked&&void 0===o.stack?a:"",o.stack].join(".");n.isDatasetVisible(a)&&r(o)&&(void 0===l[s]&&(l[s]=[]),ut.each(i.data,function(e,n){var i=l[s],a=+t.getRightValue(e);isNaN(a)||o.data[n].hidden||a<0||(i[n]=i[n]||0,i[n]+=a)}))}),ut.each(l,function(e){if(e.length>0){var n=ut.min(e),i=ut.max(e);t.min=null===t.min?n:Math.min(t.min,n),t.max=null===t.max?i:Math.max(t.max,i)}})}else ut.each(a,function(e,i){var a=n.getDatasetMeta(i);n.isDatasetVisible(i)&&r(a)&&ut.each(e.data,function(e,n){var i=+t.getRightValue(e);isNaN(i)||a.data[n].hidden||i<0||(null===t.min?t.min=i:i<t.min&&(t.min=i),null===t.max?t.max=i:i>t.max&&(t.max=i),0!==i&&(null===t.minNotZero||i<t.minNotZero)&&(t.minNotZero=i))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;t.min=Cn(e.min,t.min),t.max=Cn(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(ut.log10(t.min))-1),t.max=Math.pow(10,Math.floor(ut.log10(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(ut.log10(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(ut.log10(t.min))+1):10),null===t.minNotZero&&(t.min>0?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(ut.log10(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),i={min:Cn(e.min),max:Cn(e.max)},a=t.ticks=function(t,e){var n,i,a=[],o=Mn(t.min,Math.pow(10,Math.floor(ut.log10(e.min)))),r=Math.floor(ut.log10(e.max)),s=Math.ceil(e.max/Math.pow(10,r));0===o?(n=Math.floor(ut.log10(e.minNotZero)),i=Math.floor(e.minNotZero/Math.pow(10,n)),a.push(o),o=i*Math.pow(10,n)):(n=Math.floor(ut.log10(o)),i=Math.floor(o/Math.pow(10,n)));var l=n<0?Math.pow(10,Math.abs(n)):1;do{a.push(o),10==++i&&(i=1,l=++n>=0?1:l),o=Math.round(i*Math.pow(10,n)*l)/l}while(n<r||n===r&&i<s);var d=Mn(t.max,o);return a.push(d),a}(i,t);t.max=ut.max(a),t.min=ut.min(a),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&a.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),gn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){return this.getPixelForValue(this.tickValues[t])},_getFirstTickValue:function(t){var e=Math.floor(ut.log10(t)),n=Math.floor(t/Math.pow(10,e));return n*Math.pow(10,e)},getPixelForValue:function(t){var e,n,i,a,o,r=this,s=r.options.ticks,l=s.reverse,d=ut.log10,u=r._getFirstTickValue(r.minNotZero),c=0;return t=+r.getRightValue(t),l?(i=r.end,a=r.start,o=-1):(i=r.start,a=r.end,o=1),r.isHorizontal()?(e=r.width,n=l?r.right:r.left):(e=r.height,o*=-1,n=l?r.top:r.bottom),t!==i&&(0===i&&(c=Mn(s.fontSize,st.global.defaultFontSize),e-=c,i=u),0!==t&&(c+=e/(d(a)-d(i))*(d(t)-d(i))),n+=o*c),n},getValueForPixel:function(t){var e,n,i,a,o=this,r=o.options.ticks,s=r.reverse,l=ut.log10,d=o._getFirstTickValue(o.minNotZero);if(s?(n=o.end,i=o.start):(n=o.start,i=o.end),o.isHorizontal()?(e=o.width,a=s?o.right-t:t-o.left):(e=o.height,a=s?t-o.top:o.bottom-t),a!==n){if(0===n){var u=Mn(r.fontSize,st.global.defaultFontSize);a-=u,e-=u,n=d}a*=l(i)-l(n),a/=e,a=Math.pow(10,l(n)+a)}return a}}),Pn=_n;Sn._defaults=Pn;var In=ut.valueOrDefault,An=ut.valueAtIndexOrDefault,Dn=ut.options.resolve,Tn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:dn.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function Fn(t){var e=t.options;return e.angleLines.display||e.pointLabels.display?t.chart.data.labels.length:0}function Ln(t){var e=t.ticks;return e.display&&t.display?In(e.fontSize,st.global.defaultFontSize)+2*e.backdropPaddingY:0}function On(t,e,n,i,a){return t===i||t===a?{start:e-n/2,end:e+n/2}:t<i||t>a?{start:e-n,end:e}:{start:e,end:e+n}}function Rn(t){return 0===t||180===t?"center":t<180?"left":"right"}function zn(t,e,n,i){var a,o,r=n.y+i/2;if(ut.isArray(e))for(a=0,o=e.length;a<o;++a)t.fillText(e[a],n.x,r),r+=i;else t.fillText(e,n.x,r)}function Bn(t,e,n){90===t||270===t?n.y-=e.h/2:(t>270||t<90)&&(n.y-=e.h)}function Nn(t){return ut.isNumber(t)?t:0}var Wn=yn.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Ln(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var t=this,e=t.chart,n=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;ut.each(e.data.datasets,function(a,o){if(e.isDatasetVisible(o)){var r=e.getDatasetMeta(o);ut.each(a.data,function(e,a){var o=+t.getRightValue(e);isNaN(o)||r.data[a].hidden||(n=Math.min(o,n),i=Math.max(o,i))})}}),t.min=n===Number.POSITIVE_INFINITY?0:n,t.max=i===Number.NEGATIVE_INFINITY?0:i,t.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Ln(this.options))},convertTicksToLabels:function(){var t=this;yn.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map(t.options.pointLabels.callback,t)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this.options;t.display&&t.pointLabels.display?function(t){var e,n,i,a=ut.options._parseFont(t.options.pointLabels),o={l:0,r:t.width,t:0,b:t.height-t.paddingTop},r={};t.ctx.font=a.string,t._pointLabelSizes=[];var s,l,d,u=Fn(t);for(e=0;e<u;e++){i=t.getPointPosition(e,t.drawingArea+5),s=t.ctx,l=a.lineHeight,d=t.pointLabels[e]||"",n=ut.isArray(d)?{w:ut.longestText(s,s.font,d),h:d.length*l}:{w:s.measureText(d).width,h:l},t._pointLabelSizes[e]=n;var c=t.getIndexAngle(e),h=ut.toDegrees(c)%360,f=On(h,i.x,n.w,0,180),g=On(h,i.y,n.h,90,270);f.start<o.l&&(o.l=f.start,r.l=c),f.end>o.r&&(o.r=f.end,r.r=c),g.start<o.t&&(o.t=g.start,r.t=c),g.end>o.b&&(o.b=g.end,r.b=c)}t.setReductions(t.drawingArea,o,r)}(this):this.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var i=this,a=e.l/Math.sin(n.l),o=Math.max(e.r-i.width,0)/Math.sin(n.r),r=-e.t/Math.cos(n.t),s=-Math.max(e.b-(i.height-i.paddingTop),0)/Math.cos(n.b);a=Nn(a),o=Nn(o),r=Nn(r),s=Nn(s),i.drawingArea=Math.min(Math.floor(t-(a+o)/2),Math.floor(t-(r+s)/2)),i.setCenterPoint(a,o,r,s)},setCenterPoint:function(t,e,n,i){var a=this,o=a.width-e-a.drawingArea,r=t+a.drawingArea,s=n+a.drawingArea,l=a.height-a.paddingTop-i-a.drawingArea;a.xCenter=Math.floor((r+o)/2+a.left),a.yCenter=Math.floor((s+l)/2+a.top+a.paddingTop)},getIndexAngle:function(t){var e=2*Math.PI/Fn(this),n=this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0,i=n*Math.PI*2/360;return t*e+i},getDistanceFromCenterForValue:function(t){var e=this;if(null===t)return 0;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(){var t=this.min,e=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0)},draw:function(){var t=this,e=t.options,n=e.gridLines,i=e.ticks;if(e.display){var a=t.ctx,o=this.getIndexAngle(0),r=ut.options._parseFont(i);(e.angleLines.display||e.pointLabels.display)&&function(t){var e=t.ctx,n=t.options,i=n.angleLines,a=n.gridLines,o=n.pointLabels,r=In(i.lineWidth,a.lineWidth),s=In(i.color,a.color),l=Ln(n);e.save(),e.lineWidth=r,e.strokeStyle=s,e.setLineDash&&(e.setLineDash(Dn([i.borderDash,a.borderDash,[]])),e.lineDashOffset=Dn([i.borderDashOffset,a.borderDashOffset,0]));var d=t.getDistanceFromCenterForValue(n.ticks.reverse?t.min:t.max),u=ut.options._parseFont(o);e.font=u.string,e.textBaseline="middle";for(var c=Fn(t)-1;c>=0;c--){if(i.display&&r&&s){var h=t.getPointPosition(c,d);e.beginPath(),e.moveTo(t.xCenter,t.yCenter),e.lineTo(h.x,h.y),e.stroke()}if(o.display){var f=0===c?l/2:0,g=t.getPointPosition(c,d+f+5),p=An(o.fontColor,c,st.global.defaultFontColor);e.fillStyle=p;var m=t.getIndexAngle(c),v=ut.toDegrees(m);e.textAlign=Rn(v),Bn(v,t._pointLabelSizes[c],g),zn(e,t.pointLabels[c]||"",g,u.lineHeight)}}e.restore()}(t),ut.each(t.ticks,function(e,s){if(s>0||i.reverse){var l=t.getDistanceFromCenterForValue(t.ticksAsNumbers[s]);if(n.display&&0!==s&&function(t,e,n,i){var a,o=t.ctx,r=e.circular,s=Fn(t),l=An(e.color,i-1),d=An(e.lineWidth,i-1);if((r||s)&&l&&d){if(o.save(),o.strokeStyle=l,o.lineWidth=d,o.setLineDash&&(o.setLineDash(e.borderDash||[]),o.lineDashOffset=e.borderDashOffset||0),o.beginPath(),r)o.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{a=t.getPointPosition(0,n),o.moveTo(a.x,a.y);for(var u=1;u<s;u++)a=t.getPointPosition(u,n),o.lineTo(a.x,a.y)}o.closePath(),o.stroke(),o.restore()}}(t,n,l,s),i.display){var d=In(i.fontColor,st.global.defaultFontColor);if(a.font=r.string,a.save(),a.translate(t.xCenter,t.yCenter),a.rotate(o),i.showLabelBackdrop){var u=a.measureText(e).width;a.fillStyle=i.backdropColor,a.fillRect(-u/2-i.backdropPaddingX,-l-r.size/2-i.backdropPaddingY,u+2*i.backdropPaddingX,r.size+2*i.backdropPaddingY)}a.textAlign="center",a.textBaseline="middle",a.fillStyle=d,a.fillText(e,0,-l),a.restore()}}})}}}),En=Tn;Wn._defaults=En;var Vn=ut.valueOrDefault,Hn=Number.MIN_SAFE_INTEGER||-9007199254740991,jn=Number.MAX_SAFE_INTEGER||9007199254740991,qn={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},Un=Object.keys(qn);function Yn(t,e){return t-e}function $n(t){var e,n,i,a={},o=[];for(e=0,n=t.length;e<n;++e)i=t[e],a[i]||(a[i]=!0,o.push(i));return o}function Xn(t,e,n,i){var a=function(t,e,n){for(var i,a,o,r=0,s=t.length-1;r>=0&&r<=s;){if(a=t[(i=r+s>>1)-1]||null,o=t[i],!a)return{lo:null,hi:o};if(o[e]<n)r=i+1;else{if(!(a[e]>n))return{lo:a,hi:o};s=i-1}}return{lo:o,hi:null}}(t,e,n),o=a.lo?a.hi?a.lo:t[t.length-2]:t[0],r=a.lo?a.hi?a.hi:t[t.length-1]:t[1],s=r[e]-o[e],l=s?(n-o[e])/s:0,d=(r[i]-o[i])*l;return o[i]+d}function Kn(t,e){var n=t._adapter,i=t.options.time,a=i.parser,o=a||i.format,r=e;return"function"==typeof a&&(r=a(r)),ut.isFinite(r)||(r="string"==typeof o?n.parse(r,o):n.parse(r)),null!==r?+r:(a||"function"!=typeof o||(r=o(e),ut.isFinite(r)||(r=n.parse(r))),r)}function Gn(t,e){if(ut.isNullOrUndef(e))return null;var n=t.options.time,i=Kn(t,t.getRightValue(e));return null===i?i:(n.round&&(i=+t._adapter.startOf(i,n.round)),i)}function Zn(t){for(var e=Un.indexOf(t)+1,n=Un.length;e<n;++e)if(qn[Un[e]].common)return Un[e]}function Jn(t,e,n,i){var a,o=t._adapter,r=t.options,s=r.time,l=s.unit||function(t,e,n,i){var a,o,r,s=Un.length;for(a=Un.indexOf(t);a<s-1;++a)if(o=qn[Un[a]],r=o.steps?o.steps[o.steps.length-1]:jn,o.common&&Math.ceil((n-e)/(r*o.size))<=i)return Un[a];return Un[s-1]}(s.minUnit,e,n,i),d=Zn(l),u=Vn(s.stepSize,s.unitStepSize),c="week"===l&&s.isoWeekday,h=r.ticks.major.enabled,f=qn[l],g=e,p=n,m=[];for(u||(u=function(t,e,n,i){var a,o,r,s=e-t,l=qn[n],d=l.size,u=l.steps;if(!u)return Math.ceil(s/(i*d));for(a=0,o=u.length;a<o&&(r=u[a],!(Math.ceil(s/(d*r))<=i));++a);return r}(e,n,l,i)),c&&(g=+o.startOf(g,"isoWeek",c),p=+o.startOf(p,"isoWeek",c)),g=+o.startOf(g,c?"day":l),(p=+o.startOf(p,c?"day":l))<n&&(p=+o.add(p,1,l)),a=g,h&&d&&!c&&!s.round&&(a=+o.startOf(a,d),a=+o.add(a,~~((g-a)/(f.size*u))*u,l));a<p;a=+o.add(a,u,l))m.push(+a);return m.push(+a),m}var Qn=gn.extend({initialize:function(){this.mergeTicksOptions(),gn.prototype.initialize.call(this)},update:function(){var t=this.options,e=t.time||(t.time={}),n=this._adapter=new ln._date(t.adapters.date);return e.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),ut.mergeIf(e.displayFormats,n.formats()),gn.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),gn.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,i,a,o,r=this,s=r.chart,l=r._adapter,d=r.options.time,u=d.unit||"day",c=jn,h=Hn,f=[],g=[],p=[],m=s.data.labels||[];for(t=0,n=m.length;t<n;++t)p.push(Gn(r,m[t]));for(t=0,n=(s.data.datasets||[]).length;t<n;++t)if(s.isDatasetVisible(t))if(a=s.data.datasets[t].data,ut.isObject(a[0]))for(g[t]=[],e=0,i=a.length;e<i;++e)o=Gn(r,a[e]),f.push(o),g[t][e]=o;else{for(e=0,i=p.length;e<i;++e)f.push(p[e]);g[t]=p.slice(0)}else g[t]=[];p.length&&(p=$n(p).sort(Yn),c=Math.min(c,p[0]),h=Math.max(h,p[p.length-1])),f.length&&(f=$n(f).sort(Yn),c=Math.min(c,f[0]),h=Math.max(h,f[f.length-1])),c=Gn(r,d.min)||c,h=Gn(r,d.max)||h,c=c===jn?+l.startOf(Date.now(),u):c,h=h===Hn?+l.endOf(Date.now(),u)+1:h,r.min=Math.min(c,h),r.max=Math.max(c+1,h),r._horizontal=r.isHorizontal(),r._table=[],r._timestamps={data:f,datasets:g,labels:p}},buildTicks:function(){var t,e,n,i=this,a=i.min,o=i.max,r=i.options,s=r.time,l=[],d=[];switch(r.ticks.source){case"data":l=i._timestamps.data;break;case"labels":l=i._timestamps.labels;break;case"auto":default:l=Jn(i,a,o,i.getLabelCapacity(a))}for("ticks"===r.bounds&&l.length&&(a=l[0],o=l[l.length-1]),a=Gn(i,s.min)||a,o=Gn(i,s.max)||o,t=0,e=l.length;t<e;++t)(n=l[t])>=a&&n<=o&&d.push(n);return i.min=a,i.max=o,i._unit=s.unit||function(t,e,n,i,a){var o,r,s=Un.length;for(o=s-1;o>=Un.indexOf(n);o--)if(r=Un[o],qn[r].common&&t._adapter.diff(a,i,r)>=e.length)return r;return Un[n?Un.indexOf(n):0]}(i,d,s.minUnit,i.min,i.max),i._majorUnit=Zn(i._unit),i._table=function(t,e,n,i){if("linear"===i||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var a,o,r,s,l,d=[],u=[e];for(a=0,o=t.length;a<o;++a)(s=t[a])>e&&s<n&&u.push(s);for(u.push(n),a=0,o=u.length;a<o;++a)l=u[a+1],r=u[a-1],s=u[a],void 0!==r&&void 0!==l&&Math.round((l+r)/2)===s||d.push({time:s,pos:a/(o-1)});return d}(i._timestamps.data,a,o,r.distribution),i._offsets=function(t,e,n,i,a){var o,r,s=0,l=0;return a.offset&&e.length&&(a.time.min||(o=Xn(t,"time",e[0],"pos"),s=1===e.length?1-o:(Xn(t,"time",e[1],"pos")-o)/2),a.time.max||(r=Xn(t,"time",e[e.length-1],"pos"),l=1===e.length?r:(r-Xn(t,"time",e[e.length-2],"pos"))/2)),{start:s,end:l}}(i._table,d,0,0,r),r.ticks.reverse&&d.reverse(),function(t,e,n){var i,a,o,r,s=[];for(i=0,a=e.length;i<a;++i)o=e[i],r=!!n&&o===+t._adapter.startOf(o,n),s.push({value:o,major:r});return s}(i,d,i._majorUnit)},getLabelForIndex:function(t,e){var n=this,i=n._adapter,a=n.chart.data,o=n.options.time,r=a.labels&&t<a.labels.length?a.labels[t]:"",s=a.datasets[e].data[t];return ut.isObject(s)&&(r=n.getRightValue(s)),o.tooltipFormat?i.format(Kn(n,r),o.tooltipFormat):"string"==typeof r?r:i.format(Kn(n,r),o.displayFormats.datetime)},tickFormatFunction:function(t,e,n,i){var a=this._adapter,o=this.options,r=o.time.displayFormats,s=r[this._unit],l=this._majorUnit,d=r[l],u=+a.startOf(t,l),c=o.ticks.major,h=c.enabled&&l&&d&&t===u,f=a.format(t,i||(h?d:s)),g=h?c:o.ticks.minor,p=Vn(g.callback,g.userCallback);return p?p(f,e,n):f},convertTicksToLabels:function(t){var e,n,i=[];for(e=0,n=t.length;e<n;++e)i.push(this.tickFormatFunction(t[e].value,e,t));return i},getPixelForOffset:function(t){var e=this,n=e.options.ticks.reverse,i=e._horizontal?e.width:e.height,a=e._horizontal?n?e.right:e.left:n?e.bottom:e.top,o=Xn(e._table,"time",t,"pos"),r=i*(e._offsets.start+o)/(e._offsets.start+1+e._offsets.end);return n?a-r:a+r},getPixelForValue:function(t,e,n){var i=null;if(void 0!==e&&void 0!==n&&(i=this._timestamps.datasets[n][e]),null===i&&(i=Gn(this,t)),null!==i)return this.getPixelForOffset(i)},getPixelForTick:function(t){var e=this.getTicks();return t>=0&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this,n=e._horizontal?e.width:e.height,i=e._horizontal?e.left:e.top,a=(n?(t-i)/n:0)*(e._offsets.start+1+e._offsets.start)-e._offsets.end,o=Xn(e._table,"pos",a,"time");return e._adapter._create(o)},getLabelWidth:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,i=ut.toRadians(e.maxRotation),a=Math.cos(i),o=Math.sin(i),r=Vn(e.fontSize,st.global.defaultFontSize);return n*a+r*o},getLabelCapacity:function(t){var e=this,n=e.options.time.displayFormats.millisecond,i=e.tickFormatFunction(t,0,[],n),a=e.getLabelWidth(i),o=e.isHorizontal()?e.width:e.height,r=Math.floor(o/a);return r>0?r:1}}),ti={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};Qn._defaults=ti;var ei={category:pn,linear:kn,logarithmic:Sn,radialLinear:Wn,time:Qn},ni={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};ln._date.override("function"==typeof t?{_id:"moment",formats:function(){return ni},parse:function(e,n){return"string"==typeof e&&"string"==typeof n?e=t(e,n):e instanceof t||(e=t(e)),e.isValid()?e.valueOf():null},format:function(e,n){return t(e).format(n)},add:function(e,n,i){return t(e).add(n,i).valueOf()},diff:function(e,n,i){return t.duration(t(e).diff(t(n))).as(i)},startOf:function(e,n,i){return e=t(e),"isoWeek"===n?e.isoWeekday(i).valueOf():e.startOf(n).valueOf()},endOf:function(e,n){return t(e).endOf(n).valueOf()},_create:function(e){return t(e)}}:{}),st._set("global",{plugins:{filler:{propagate:!0}}});var ii={dataset:function(t){var e=t.fill,n=t.chart,i=n.getDatasetMeta(e),a=i&&n.isDatasetVisible(e),o=a&&i.dataset._children||[],r=o.length||0;return r?function(t,e){return e<r&&o[e]._view||null}:null},boundary:function(t){var e=t.boundary,n=e?e.x:null,i=e?e.y:null;return function(t){return{x:null===n?t.x:n,y:null===i?t.y:i}}}};function ai(t,e,n){var i,a=t._model||{},o=a.fill;if(void 0===o&&(o=!!a.backgroundColor),!1===o||null===o)return!1;if(!0===o)return"origin";if(i=parseFloat(o,10),isFinite(i)&&Math.floor(i)===i)return"-"!==o[0]&&"+"!==o[0]||(i=e+i),!(i===e||i<0||i>=n)&&i;switch(o){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return o;default:return!1}}function oi(t){var e,n=t.el._model||{},i=t.el._scale||{},a=t.fill,o=null;if(isFinite(a))return null;if("start"===a?o=void 0===n.scaleBottom?i.bottom:n.scaleBottom:"end"===a?o=void 0===n.scaleTop?i.top:n.scaleTop:void 0!==n.scaleZero?o=n.scaleZero:i.getBasePosition?o=i.getBasePosition():i.getBasePixel&&(o=i.getBasePixel()),null!=o){if(void 0!==o.x&&void 0!==o.y)return o;if(ut.isFinite(o))return{x:(e=i.isHorizontal())?o:null,y:e?null:o}}return null}function ri(t,e,n){var i,a=t[e],o=a.fill,r=[e];if(!n)return o;for(;!1!==o&&-1===r.indexOf(o);){if(!isFinite(o))return o;if(!(i=t[o]))return!1;if(i.visible)return o;r.push(o),o=i.fill}return!1}function si(t){var e=t.fill,n="dataset";return!1===e?null:(isFinite(e)||(n="boundary"),ii[n](t))}function li(t){return t&&!t.skip}function di(t,e,n,i,a){var o;if(i&&a){for(t.moveTo(e[0].x,e[0].y),o=1;o<i;++o)ut.canvas.lineTo(t,e[o-1],e[o]);for(t.lineTo(n[a-1].x,n[a-1].y),o=a-1;o>0;--o)ut.canvas.lineTo(t,n[o],n[o-1],!0)}}var ui={id:"filler",afterDatasetsUpdate:function(t,e){var n,i,a,o,r=(t.data.datasets||[]).length,s=e.propagate,l=[];for(i=0;i<r;++i)n=t.getDatasetMeta(i),a=n.dataset,o=null,a&&a._model&&a instanceof Wt.Line&&(o={visible:t.isDatasetVisible(i),fill:ai(a,i,r),chart:t,el:a}),n.$filler=o,l.push(o);for(i=0;i<r;++i)(o=l[i])&&(o.fill=ri(l,i,s),o.boundary=oi(o),o.mapper=si(o))},beforeDatasetDraw:function(t,e){var n=e.meta.$filler;if(n){var i=t.ctx,a=n.el,o=a._view,r=a._children||[],s=n.mapper,l=o.backgroundColor||st.global.defaultColor;s&&l&&r.length&&(ut.canvas.clipArea(i,t.chartArea),function(t,e,n,i,a,o){var r,s,l,d,u,c,h,f=e.length,g=i.spanGaps,p=[],m=[],v=0,b=0;for(t.beginPath(),r=0,s=f+!!o;r<s;++r)d=e[l=r%f]._view,u=n(d,l,i),c=li(d),h=li(u),c&&h?(v=p.push(d),b=m.push(u)):v&&b&&(g?(c&&p.push(d),h&&m.push(u)):(di(t,p,m,v,b),v=b=0,p=[],m=[]));di(t,p,m,v,b),t.closePath(),t.fillStyle=a,t.fill()}(i,r,s,o,l,a._loop),ut.canvas.unclipArea(i))}}},ci=ut.noop,hi=ut.valueOrDefault;function fi(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}st._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,i=this.chart,a=i.getDatasetMeta(n);a.hidden=null===a.hidden?!i.data.datasets[n].hidden:null,i.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(t){var e=t.data;return ut.isArray(e.datasets)?e.datasets.map(function(e,n){return{text:e.label,fillStyle:ut.isArray(e.backgroundColor)?e.backgroundColor[0]:e.backgroundColor,hidden:!t.isDatasetVisible(n),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');for(var n=0;n<t.data.datasets.length;n++)e.push('<li><span style="background-color:'+t.data.datasets[n].backgroundColor+'"></span>'),t.data.datasets[n].label&&e.push(t.data.datasets[n].label),e.push("</li>");return e.push("</ul>"),e.join("")}});var gi=pt.extend({initialize:function(t){ut.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:ci,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:ci,beforeSetDimensions:ci,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:ci,beforeBuildLabels:ci,buildLabels:function(){var t=this,e=t.options.labels||{},n=ut.callback(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter(function(n){return e.filter(n,t.chart.data)})),t.options.reverse&&n.reverse(),t.legendItems=n},afterBuildLabels:ci,beforeFit:ci,fit:function(){var t=this,e=t.options,n=e.labels,i=e.display,a=t.ctx,o=ut.options._parseFont(n),r=o.size,s=t.legendHitBoxes=[],l=t.minSize,d=t.isHorizontal();if(d?(l.width=t.maxWidth,l.height=i?10:0):(l.width=i?10:0,l.height=t.maxHeight),i)if(a.font=o.string,d){var u=t.lineWidths=[0],c=0;a.textAlign="left",a.textBaseline="top",ut.each(t.legendItems,function(t,e){var i=fi(n,r),o=i+r/2+a.measureText(t.text).width;(0===e||u[u.length-1]+o+n.padding>l.width)&&(c+=r+n.padding,u[u.length-(e>0?0:1)]=n.padding),s[e]={left:0,top:0,width:o,height:r},u[u.length-1]+=o+n.padding}),l.height+=c}else{var h=n.padding,f=t.columnWidths=[],g=n.padding,p=0,m=0,v=r+h;ut.each(t.legendItems,function(t,e){var i=fi(n,r),o=i+r/2+a.measureText(t.text).width;e>0&&m+v>l.height-h&&(g+=p+n.padding,f.push(p),p=0,m=0),p=Math.max(p,o),m+=v,s[e]={left:0,top:0,width:o,height:r}}),g+=p,f.push(p),l.width+=g}t.width=l.width,t.height=l.height},afterFit:ci,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var t=this,e=t.options,n=e.labels,i=st.global,a=i.defaultColor,o=i.elements.line,r=t.width,s=t.lineWidths;if(e.display){var l,d=t.ctx,u=hi(n.fontColor,i.defaultFontColor),c=ut.options._parseFont(n),h=c.size;d.textAlign="left",d.textBaseline="middle",d.lineWidth=.5,d.strokeStyle=u,d.fillStyle=u,d.font=c.string;var f=fi(n,h),g=t.legendHitBoxes,p=t.isHorizontal();l=p?{x:t.left+(r-s[0])/2+n.padding,y:t.top+n.padding,line:0}:{x:t.left+n.padding,y:t.top+n.padding,line:0};var m=h+n.padding;ut.each(t.legendItems,function(i,u){var c=d.measureText(i.text).width,v=f+h/2+c,b=l.x,y=l.y;p?u>0&&b+v+n.padding>t.left+t.minSize.width&&(y=l.y+=m,l.line++,b=l.x=t.left+(r-s[l.line])/2+n.padding):u>0&&y+m>t.top+t.minSize.height&&(b=l.x=b+t.columnWidths[l.line]+n.padding,y=l.y=t.top+n.padding,l.line++),function(t,n,i){if(!(isNaN(f)||f<=0)){d.save();var r=hi(i.lineWidth,o.borderWidth);if(d.fillStyle=hi(i.fillStyle,a),d.lineCap=hi(i.lineCap,o.borderCapStyle),d.lineDashOffset=hi(i.lineDashOffset,o.borderDashOffset),d.lineJoin=hi(i.lineJoin,o.borderJoinStyle),d.lineWidth=r,d.strokeStyle=hi(i.strokeStyle,a),d.setLineDash&&d.setLineDash(hi(i.lineDash,o.borderDash)),e.labels&&e.labels.usePointStyle){var s=f*Math.SQRT2/2,l=t+f/2,u=n+h/2;ut.canvas.drawPoint(d,i.pointStyle,s,l,u)}else 0!==r&&d.strokeRect(t,n,f,h),d.fillRect(t,n,f,h);d.restore()}}(b,y,i),g[u].left=b,g[u].top=y,function(t,e,n,i){var a=h/2,o=f+a+t,r=e+a;d.fillText(n.text,o,r),n.hidden&&(d.beginPath(),d.lineWidth=2,d.moveTo(o,r),d.lineTo(o+i,r),d.stroke())}(b,y,i,c),p?l.x+=v+n.padding:l.y+=m})}},_getLegendItemAt:function(t,e){var n,i,a,o=this;if(t>=o.left&&t<=o.right&&e>=o.top&&e<=o.bottom)for(a=o.legendHitBoxes,n=0;n<a.length;++n)if(i=a[n],t>=i.left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return o.legendItems[n];return null},handleEvent:function(t){var e,n=this,i=n.options,a="mouseup"===t.type?"click":t.type;if("mousemove"===a){if(!i.onHover&&!i.onLeave)return}else{if("click"!==a)return;if(!i.onClick)return}e=n._getLegendItemAt(t.x,t.y),"click"===a?e&&i.onClick&&i.onClick.call(n,t.native,e):(i.onLeave&&e!==n._hoveredItem&&(n._hoveredItem&&i.onLeave.call(n,t.native,n._hoveredItem),n._hoveredItem=e),i.onHover&&e&&i.onHover.call(n,t.native,e))}});function pi(t,e){var n=new gi({ctx:t.ctx,options:e,chart:t});we.configure(t,n,e),we.addBox(t,n),t.legend=n}var mi={id:"legend",_element:gi,beforeInit:function(t){var e=t.options.legend;e&&pi(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(ut.mergeIf(e,st.global.legend),n?(we.configure(t,n,e),n.options=e):pi(t,e)):n&&(we.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},vi=ut.noop;st._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var bi=pt.extend({initialize:function(t){ut.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:vi,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:vi,beforeSetDimensions:vi,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:vi,beforeBuildLabels:vi,buildLabels:vi,afterBuildLabels:vi,beforeFit:vi,fit:function(){var t=this,e=t.options,n=e.display,i=t.minSize,a=ut.isArray(e.text)?e.text.length:1,o=ut.options._parseFont(e),r=n?a*o.lineHeight+2*e.padding:0;t.isHorizontal()?(i.width=t.maxWidth,i.height=r):(i.width=r,i.height=t.maxHeight),t.width=i.width,t.height=i.height},afterFit:vi,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this,e=t.ctx,n=t.options;if(n.display){var i,a,o,r=ut.options._parseFont(n),s=r.lineHeight,l=s/2+n.padding,d=0,u=t.top,c=t.left,h=t.bottom,f=t.right;e.fillStyle=ut.valueOrDefault(n.fontColor,st.global.defaultFontColor),e.font=r.string,t.isHorizontal()?(a=c+(f-c)/2,o=u+l,i=f-c):(a="left"===n.position?c+l:f-l,o=u+(h-u)/2,i=h-u,d=Math.PI*("left"===n.position?-.5:.5)),e.save(),e.translate(a,o),e.rotate(d),e.textAlign="center",e.textBaseline="middle";var g=n.text;if(ut.isArray(g))for(var p=0,m=0;m<g.length;++m)e.fillText(g[m],0,p,i),p+=s;else e.fillText(g,0,0,i);e.restore()}}});function yi(t,e){var n=new bi({ctx:t.ctx,options:e,chart:t});we.configure(t,n,e),we.addBox(t,n),t.titleBlock=n}var xi={},ki=ui,wi=mi,Mi={id:"title",_element:bi,beforeInit:function(t){var e=t.options.title;e&&yi(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(ut.mergeIf(e,st.global.title),n?(we.configure(t,n,e),n.options=e):yi(t,e)):n&&(we.removeBox(t,n),delete t.titleBlock)}};for(var _i in xi.filler=ki,xi.legend=wi,xi.title=Mi,on.helpers=ut,function(){function t(t,e,n){var i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}function e(t){return null!=t&&"none"!==t}function n(n,i,a){var o=document.defaultView,r=ut._getParentNode(n),s=o.getComputedStyle(n)[i],l=o.getComputedStyle(r)[i],d=e(s),u=e(l),c=Number.POSITIVE_INFINITY;return d||u?Math.min(d?t(s,n,a):c,u?t(l,r,a):c):"none"}ut.where=function(t,e){if(ut.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return ut.each(t,function(t){e(t)&&n.push(t)}),n},ut.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var i=0,a=t.length;i<a;++i)if(e.call(n,t[i],i,t))return i;return-1},ut.findNextWhere=function(t,e,n){ut.isNullOrUndef(n)&&(n=-1);for(var i=n+1;i<t.length;i++){var a=t[i];if(e(a))return a}},ut.findPreviousWhere=function(t,e,n){ut.isNullOrUndef(n)&&(n=t.length);for(var i=n-1;i>=0;i--){var a=t[i];if(e(a))return a}},ut.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},ut.almostEquals=function(t,e,n){return Math.abs(t-e)<n},ut.almostWhole=function(t,e){var n=Math.round(t);return n-e<t&&n+e>t},ut.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},ut.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},ut.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0==(t=+t)||isNaN(t)?t:t>0?1:-1},ut.log10=Math.log10?function(t){return Math.log10(t)}:function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e),i=t===Math.pow(10,n);return i?n:e},ut.toRadians=function(t){return t*(Math.PI/180)},ut.toDegrees=function(t){return t*(180/Math.PI)},ut._decimalPlaces=function(t){if(ut.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},ut.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,a=Math.sqrt(n*n+i*i),o=Math.atan2(i,n);return o<-.5*Math.PI&&(o+=2*Math.PI),{angle:o,distance:a}},ut.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},ut.aliasPixel=function(t){return t%2==0?0:.5},ut._alignPixel=function(t,e,n){var i=t.currentDevicePixelRatio,a=n/2;return Math.round((e-a)*i)/i+a},ut.splineCurve=function(t,e,n,i){var a=t.skip?e:t,o=e,r=n.skip?e:n,s=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),l=Math.sqrt(Math.pow(r.x-o.x,2)+Math.pow(r.y-o.y,2)),d=s/(s+l),u=l/(s+l);d=isNaN(d)?0:d,u=isNaN(u)?0:u;var c=i*d,h=i*u;return{previous:{x:o.x-c*(r.x-a.x),y:o.y-c*(r.y-a.y)},next:{x:o.x+h*(r.x-a.x),y:o.y+h*(r.y-a.y)}}},ut.EPSILON=Number.EPSILON||1e-14,ut.splineCurveMonotone=function(t){var e,n,i,a,o,r,s,l,d,u=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),c=u.length;for(e=0;e<c;++e)if(!(i=u[e]).model.skip){if(n=e>0?u[e-1]:null,(a=e<c-1?u[e+1]:null)&&!a.model.skip){var h=a.model.x-i.model.x;i.deltaK=0!==h?(a.model.y-i.model.y)/h:0}!n||n.model.skip?i.mK=i.deltaK:!a||a.model.skip?i.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(i.deltaK)?i.mK=0:i.mK=(n.deltaK+i.deltaK)/2}for(e=0;e<c-1;++e)i=u[e],a=u[e+1],i.model.skip||a.model.skip||(ut.almostEquals(i.deltaK,0,this.EPSILON)?i.mK=a.mK=0:(o=i.mK/i.deltaK,r=a.mK/i.deltaK,(l=Math.pow(o,2)+Math.pow(r,2))<=9||(s=3/Math.sqrt(l),i.mK=o*s*i.deltaK,a.mK=r*s*i.deltaK)));for(e=0;e<c;++e)(i=u[e]).model.skip||(n=e>0?u[e-1]:null,a=e<c-1?u[e+1]:null,n&&!n.model.skip&&(d=(i.model.x-n.model.x)/3,i.model.controlPointPreviousX=i.model.x-d,i.model.controlPointPreviousY=i.model.y-d*i.mK),a&&!a.model.skip&&(d=(a.model.x-i.model.x)/3,i.model.controlPointNextX=i.model.x+d,i.model.controlPointNextY=i.model.y+d*i.mK))},ut.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},ut.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},ut.niceNum=function(t,e){var n=Math.floor(ut.log10(t)),i=t/Math.pow(10,n);return(e?i<1.5?1:i<3?2:i<7?5:10:i<=1?1:i<=2?2:i<=5?5:10)*Math.pow(10,n)},ut.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},ut.getRelativePosition=function(t,e){var n,i,a=t.originalEvent||t,o=t.target||t.srcElement,r=o.getBoundingClientRect(),s=a.touches;s&&s.length>0?(n=s[0].clientX,i=s[0].clientY):(n=a.clientX,i=a.clientY);var l=parseFloat(ut.getStyle(o,"padding-left")),d=parseFloat(ut.getStyle(o,"padding-top")),u=parseFloat(ut.getStyle(o,"padding-right")),c=parseFloat(ut.getStyle(o,"padding-bottom")),h=r.right-r.left-l-u,f=r.bottom-r.top-d-c;return n=Math.round((n-r.left-l)/h*o.width/e.currentDevicePixelRatio),i=Math.round((i-r.top-d)/f*o.height/e.currentDevicePixelRatio),{x:n,y:i}},ut.getConstraintWidth=function(t){return n(t,"max-width","clientWidth")},ut.getConstraintHeight=function(t){return n(t,"max-height","clientHeight")},ut._calculatePadding=function(t,e,n){return(e=ut.getStyle(t,e)).indexOf("%")>-1?n*parseInt(e,10)/100:parseInt(e,10)},ut._getParentNode=function(t){var e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e},ut.getMaximumWidth=function(t){var e=ut._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,i=ut._calculatePadding(e,"padding-left",n),a=ut._calculatePadding(e,"padding-right",n),o=n-i-a,r=ut.getConstraintWidth(t);return isNaN(r)?o:Math.min(o,r)},ut.getMaximumHeight=function(t){var e=ut._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,i=ut._calculatePadding(e,"padding-top",n),a=ut._calculatePadding(e,"padding-bottom",n),o=n-i-a,r=ut.getConstraintHeight(t);return isNaN(r)?o:Math.min(o,r)},ut.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},ut.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var i=t.canvas,a=t.height,o=t.width;i.height=a*n,i.width=o*n,t.ctx.scale(n,n),i.style.height||i.style.width||(i.style.height=a+"px",i.style.width=o+"px")}},ut.fontString=function(t,e,n){return e+" "+t+"px "+n},ut.longestText=function(t,e,n,i){var a=(i=i||{}).data=i.data||{},o=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(a=i.data={},o=i.garbageCollect=[],i.font=e),t.font=e;var r=0;ut.each(n,function(e){null!=e&&!0!==ut.isArray(e)?r=ut.measureText(t,a,o,r,e):ut.isArray(e)&&ut.each(e,function(e){null==e||ut.isArray(e)||(r=ut.measureText(t,a,o,r,e))})});var s=o.length/2;if(s>n.length){for(var l=0;l<s;l++)delete a[o[l]];o.splice(0,s)}return r},ut.measureText=function(t,e,n,i,a){var o=e[a];return o||(o=e[a]=t.measureText(a).width,n.push(a)),o>i&&(i=o),i},ut.numberOfLabelLines=function(t){var e=1;return ut.each(t,function(t){ut.isArray(t)&&t.length>e&&(e=t.length)}),e},ut.color=$?function(t){return t instanceof CanvasGradient&&(t=st.global.defaultColor),$(t)}:function(t){return console.error("Color.js not found!"),t},ut.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:ut.color(t).saturate(.5).darken(.1).rgbString()}}(),on._adapters=ln,on.Animation=vt,on.animationService=bt,on.controllers=ue,on.DatasetController=Mt,on.defaults=st,on.Element=pt,on.elements=Wt,on.Interaction=ve,on.layouts=we,on.platform=Ee,on.plugins=Ve,on.Scale=gn,on.scaleService=He,on.Ticks=dn,on.Tooltip=Je,on.helpers.each(ei,function(t,e){on.scaleService.registerScaleType(e,t,t._defaults)}),xi)xi.hasOwnProperty(_i)&&on.plugins.register(xi[_i]);on.platform.initialize();var Ci=on;return"undefined"!=typeof window&&(window.Chart=on),on.Chart=on,on.Legend=xi.legend._element,on.Title=xi.title._element,on.pluginService=on.plugins,on.PluginBase=on.Element.extend({}),on.canvasHelpers=on.helpers.canvas,on.layoutService=on.layouts,on.LinearScaleBase=yn,on.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],function(t){on[t]=function(e,n){return new on(e,on.helpers.merge(n||{},{type:t.charAt(0).toLowerCase()+t.slice(1)}))}}),Ci}(function(){try{return n(9)}catch(t){}}())},function(t,e){if("undefined"==typeof moment){var n=new Error("Cannot find module 'moment'");throw n.code="MODULE_NOT_FOUND",n}t.exports=moment},function(t,e){},,,,,function(t,e){},,function(t,e){},,function(t,e){},,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,